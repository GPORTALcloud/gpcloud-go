// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ptypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicAPIClient is the client API for PublicAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicAPIClient interface {
	// Performs a User Login
	//
	// The TOTP field is optional and is only required if the user has 2-factor-authentication enabled.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Register a new User
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Get JSON Web Key Set (JWKS)
	//
	// The JWKS response is RFC7517 conform and can be used to validate our JWT tokens.
	ListJwtPublicKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListJwtPublicKeysResponse, error)
	// Refresh a user access token
	//
	// Provide a valid refresh token to receive a new access and refresh token pair.
	RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error)
	// Request a password forgotten token
	RequestPasswordForgottenToken(ctx context.Context, in *RequestPasswordForgottenTokenRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Reset a user password with a token
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type publicAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicAPIClient(cc grpc.ClientConnInterface) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ListJwtPublicKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListJwtPublicKeysResponse, error) {
	out := new(ListJwtPublicKeysResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/ListJwtPublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*RefreshTokensResponse, error) {
	out := new(RefreshTokensResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/RefreshTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) RequestPasswordForgottenToken(ctx context.Context, in *RequestPasswordForgottenTokenRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/RequestPasswordForgottenToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.PublicAPI/ResetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAPIServer is the server API for PublicAPI service.
// All implementations must embed UnimplementedPublicAPIServer
// for forward compatibility
type PublicAPIServer interface {
	// Performs a User Login
	//
	// The TOTP field is optional and is only required if the user has 2-factor-authentication enabled.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Register a new User
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Get JSON Web Key Set (JWKS)
	//
	// The JWKS response is RFC7517 conform and can be used to validate our JWT tokens.
	ListJwtPublicKeys(context.Context, *EmptyRequest) (*ListJwtPublicKeysResponse, error)
	// Refresh a user access token
	//
	// Provide a valid refresh token to receive a new access and refresh token pair.
	RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error)
	// Request a password forgotten token
	RequestPasswordForgottenToken(context.Context, *RequestPasswordForgottenTokenRequest) (*EmptyResponse, error)
	// Reset a user password with a token
	ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedPublicAPIServer()
}

// UnimplementedPublicAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPublicAPIServer struct {
}

func (UnimplementedPublicAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPublicAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedPublicAPIServer) ListJwtPublicKeys(context.Context, *EmptyRequest) (*ListJwtPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJwtPublicKeys not implemented")
}
func (UnimplementedPublicAPIServer) RefreshTokens(context.Context, *RefreshTokensRequest) (*RefreshTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokens not implemented")
}
func (UnimplementedPublicAPIServer) RequestPasswordForgottenToken(context.Context, *RequestPasswordForgottenTokenRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordForgottenToken not implemented")
}
func (UnimplementedPublicAPIServer) ResetUserPassword(context.Context, *ResetUserPasswordRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedPublicAPIServer) mustEmbedUnimplementedPublicAPIServer() {}

// UnsafePublicAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicAPIServer will
// result in compilation errors.
type UnsafePublicAPIServer interface {
	mustEmbedUnimplementedPublicAPIServer()
}

func RegisterPublicAPIServer(s grpc.ServiceRegistrar, srv PublicAPIServer) {
	s.RegisterService(&PublicAPI_ServiceDesc, srv)
}

func _PublicAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ListJwtPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ListJwtPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/ListJwtPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ListJwtPublicKeys(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_RefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).RefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/RefreshTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).RefreshTokens(ctx, req.(*RefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_RequestPasswordForgottenToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPasswordForgottenTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).RequestPasswordForgottenToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/RequestPasswordForgottenToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).RequestPasswordForgottenToken(ctx, req.(*RequestPasswordForgottenTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PublicAPI/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ResetUserPassword(ctx, req.(*ResetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicAPI_ServiceDesc is the grpc.ServiceDesc for PublicAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PublicAPI_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PublicAPI_Register_Handler,
		},
		{
			MethodName: "ListJwtPublicKeys",
			Handler:    _PublicAPI_ListJwtPublicKeys_Handler,
		},
		{
			MethodName: "RefreshTokens",
			Handler:    _PublicAPI_RefreshTokens_Handler,
		},
		{
			MethodName: "RequestPasswordForgottenToken",
			Handler:    _PublicAPI_RequestPasswordForgottenToken_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _PublicAPI_ResetUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// UserAPIClient is the client API for UserAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAPIClient interface {
	// User profile information
	GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Get user compute resource limit
	GetUserComputeLimit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserComputeLimitResponse, error)
	// Update user profile information
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Confirms the user e-mail address
	ConfirmEMail(ctx context.Context, in *ConfirmEMailRequest, opts ...grpc.CallOption) (*User, error)
	// Resends the user confirm email
	ResendConfirmEMail(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Changes the user password
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Begin a WebAuthn registration
	BeginWebAuthnRegistration(ctx context.Context, in *BeginWebAuthnRegistrationRequest, opts ...grpc.CallOption) (*BeginWebAuthnRegistrationResponse, error)
	// Finish the WebAuthn registration
	FinishWebAuthnRegistration(ctx context.Context, in *FinishWebAuthnRegistrationRequest, opts ...grpc.CallOption) (*FinishWebAuthnRegistrationResponse, error)
	// Delete a WebAuthn device
	DeleteWebAuthnDevice(ctx context.Context, in *DeleteWebAuthnDeviceRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List active user sessions
	ListSessions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	// Delete user session
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Creates a new long-lived user token
	//
	// Long-lived user tokens can be used to access the API without the need to refresh the token.
	// Never share this kind of token with 3rd parties, we recommend to store it only in a encrypted way.
	CreateLongLivedToken(ctx context.Context, in *CreateLongLivedTokenRequest, opts ...grpc.CallOption) (*LongLivedToken, error)
	// List all active long-lived tokens
	ListLongLivedTokens(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListLongLivedTokensResponse, error)
	// Revokes a long-lived token
	//
	// This directly revokes and token and it can no longer being used or restored.
	RevokeLongLivedToken(ctx context.Context, in *RevokeLongLivedTokenRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create a new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Change default project
	//
	// Changes the default project for the user
	ChangeDefaultProject(ctx context.Context, in *ChangeDefaultProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Get a existing project
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// SubscribeProjectNotifications Subscribes to project notifications
	SubscribeProjectNotifications(ctx context.Context, in *SubscribeProjectNotificationsRequest, opts ...grpc.CallOption) (UserAPI_SubscribeProjectNotificationsClient, error)
	// Show project logs
	GetProjectLogs(ctx context.Context, in *GetProjectLogsRequest, opts ...grpc.CallOption) (*GetProjectLogsResponse, error)
	// Get project traffic information
	GetProjectTraffic(ctx context.Context, in *GetProjectTrafficRequest, opts ...grpc.CallOption) (*GetProjectTrafficResponse, error)
	// List all flavours for datacenter and project
	GetProjectFlavours(ctx context.Context, in *GetProjectFlavoursRequest, opts ...grpc.CallOption) (*GetProjectFlavoursResponse, error)
	// Update a existing project
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Join a project
	//
	// If you have an open project invite you can accept or decline the invite.
	// On accepting the project will be added to your project list.
	JoinProject(ctx context.Context, in *JoinProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Leave a project
	//
	// If you have an open project invite you can accept or decline the invite.
	// On accepting the project will be added to your project list.
	LeaveProject(ctx context.Context, in *LeaveProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Invite a new member to the project
	//
	// You can invite another member to your project by using the e-mail address.
	InviteMemberToProject(ctx context.Context, in *InviteMemberToProjectRequest, opts ...grpc.CallOption) (*InviteMemberToProjectResponse, error)
	// Removes a member from the project
	RemoveMemberFromProject(ctx context.Context, in *RemoveMemberFromProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all projects
	//
	// Returns a list with all your projects and invites.
	ListProjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Delete a existing project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Generates the current billing preview PDF
	//
	// Generates the billing PDF and returns the download url.
	GetProjectCurrentBillingPreviewPdf(ctx context.Context, in *GetProjectCurrentBillingPreviewPdfRequest, opts ...grpc.CallOption) (*GetProjectCurrentBillingPreviewPdfResponse, error)
	// Get the download URL of a specified bill.
	GetProjectBillPdf(ctx context.Context, in *GetProjectBillPdfRequest, opts ...grpc.CallOption) (*GetProjectBillPdfResponse, error)
	// Redeem a Voucher
	RedeemVoucher(ctx context.Context, in *RedeemVoucherRequest, opts ...grpc.CallOption) (*RedeemVoucherResponse, error)
	// Create a final bill for the current month.
	PayProjectNow(ctx context.Context, in *PayProjectNowRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Shows the current billing preview
	GetProjectCurrentBillingPreview(ctx context.Context, in *GetProjectCurrentBillingPreviewRequest, opts ...grpc.CallOption) (*GetProjectCurrentBillingPreviewResponse, error)
	// Returns the outstanding balance
	GetProjectsOutstandingBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetProjectsOutstandingBalanceResponse, error)
	// All project bills by year
	GetProjectBills(ctx context.Context, in *GetProjectBillsRequest, opts ...grpc.CallOption) (*GetProjectBillsResponse, error)
	// List all SSH authorized keys for project
	ListProjectSSHKeys(ctx context.Context, in *ListProjectSSHKeysRequest, opts ...grpc.CallOption) (*ListProjectSSHKeysResponse, error)
	// List all SSH authorized keys for user
	ListUserSSHKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListUserSSHKeysResponse, error)
	// Create new SSH authorized key
	CreateUserSSHKey(ctx context.Context, in *CreateUserSSHKeyRequest, opts ...grpc.CallOption) (*SSHKey, error)
	// Delete a existing SSH authorized key
	DeleteUserSSHKey(ctx context.Context, in *DeleteUserSSHKeyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create a new support ticket
	CreateProjectSupportTicket(ctx context.Context, in *CreateProjectSupportTicketRequest, opts ...grpc.CallOption) (*SupportTicket, error)
	// Get support ticket details
	GetProjectSupportTicket(ctx context.Context, in *GetProjectSupportTicketRequest, opts ...grpc.CallOption) (*SupportTicket, error)
	// List all project support tickets
	ListProjectSupportTickets(ctx context.Context, in *ListProjectSupportTicketsRequest, opts ...grpc.CallOption) (*ListProjectSupportTicketsResponse, error)
	// Close a support ticket
	CloseProjectSupportTicket(ctx context.Context, in *CloseProjectSupportTicketRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Add a comment to the ticket
	AddProjectSupportTicketComment(ctx context.Context, in *AddProjectSupportTicketCommentRequest, opts ...grpc.CallOption) (*SupportTicket, error)
	// Change the current project support package
	ChangeProjectSupportPackage(ctx context.Context, in *ChangeProjectSupportPackageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all available project support packages
	ListProjectSupportPackages(ctx context.Context, in *ListProjectSupportPackagesRequest, opts ...grpc.CallOption) (*ListProjectSupportPackagesResponse, error)
	// Create compute resources
	//
	// You can only provide one authorization method, please choose password or
	// SSH authorized keys. You can not use both methods at the same request.
	CreateComputeResource(ctx context.Context, in *CreateComputeResourceRequest, opts ...grpc.CallOption) (*CreateComputeResourceResponse, error)
	// List compute resources
	ListComputeResources(ctx context.Context, in *ListComputeResourcesRequest, opts ...grpc.CallOption) (*ListComputeResourcesResponse, error)
	// Get a existing compute resource
	GetComputeResource(ctx context.Context, in *GetComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error)
	// Return compute resource traffic usage
	GetComputeResourceTraffic(ctx context.Context, in *GetComputeResourceTrafficRequest, opts ...grpc.CallOption) (*GetComputeResourceTrafficResponse, error)
	// Updates a existing compute resource
	UpdateComputeResource(ctx context.Context, in *UpdateComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error)
	// Get the VNC token for a compute resource
	GetComputeResourceConsole(ctx context.Context, in *GetComputeResourceConsoleRequest, opts ...grpc.CallOption) (*GetComputeResourceConsoleResponse, error)
	// Changes the compute resource rescue mode
	ChangeComputeResourceRescueMode(ctx context.Context, in *ComputeResourceRescueModeRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Change compute resource power status
	PowerActionComputeResource(ctx context.Context, in *PowerActionComputeResourceRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Reinstall the compute resource
	ReinstallComputeResource(ctx context.Context, in *ReinstallComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error)
	// Destroy the compute resource
	DestroyComputeResource(ctx context.Context, in *DestroyComputeResourceRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List project networks
	ListProjectNetworks(ctx context.Context, in *ListProjectNetworksRequest, opts ...grpc.CallOption) (*ListProjectNetworksResponse, error)
	// Get a project network
	GetProjectNetwork(ctx context.Context, in *GetProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Update a project network
	UpdateProjectNetwork(ctx context.Context, in *UpdateProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Create a project network subnet
	CreateProjectNetworkSubnet(ctx context.Context, in *CreateProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// Update a project network subnet
	UpdateProjectNetworkSubnet(ctx context.Context, in *UpdateProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// Delete a project network subnet
	DeleteProjectNetworkSubnet(ctx context.Context, in *DeleteProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create a new project image
	CreateProjectImage(ctx context.Context, in *CreateProjectImageRequest, opts ...grpc.CallOption) (*Image, error)
	// List project images
	ListProjectImages(ctx context.Context, in *ListProjectImagesRequest, opts ...grpc.CallOption) (*ListProjectImagesResponse, error)
	// Get a project image
	GetProjectImage(ctx context.Context, in *GetProjectImageRequest, opts ...grpc.CallOption) (*Image, error)
	// Delete a project image
	DeleteProjectImage(ctx context.Context, in *DeleteProjectImageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Delete a project image version
	DeleteProjectImageVersion(ctx context.Context, in *DeleteProjectImageVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all datacenters with region
	ListDataCenters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDataCenterResponse, error)
	// List all public images for flavour
	ListPublicImages(ctx context.Context, in *ListPublicImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// List configured two-factor methods
	GetTwoFactorMethods(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetTwoFactorMethodsResponse, error)
	// Create a TOTP secret and QR code
	CreateTOTP(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CreateTOTPResponse, error)
	// Remove TOTP two-factor method from user account
	RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Add the TOTP two-factor method
	AddTOTP(ctx context.Context, in *AddTOTPRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Regenerate two-factor recovery codes
	RegenerateRecoveryCodes(ctx context.Context, in *RegenerateRecoveryCodesRequest, opts ...grpc.CallOption) (*RegenerateRecoveryCodesResponse, error)
	// List all credit cards
	ListCreditCards(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListCreditCardsResponse, error)
	// Adds new credit card
	AddCreditCard(ctx context.Context, in *AddCreditCardRequest, opts ...grpc.CallOption) (*AddCreditCardResponse, error)
	// Delete a existing credit card
	DeleteCreditCard(ctx context.Context, in *DeleteCreditCardRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all countries
	//
	// Returns a list with all countries and additional information
	ListCountries(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	// Create new billing address
	CreateBillingAddress(ctx context.Context, in *CreateBillingAddressRequest, opts ...grpc.CallOption) (*BillingAddress, error)
	// List all billing addresses
	ListBillingAddresses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBillingAddressesResponse, error)
	// Deletes a billing addresses
	DeleteBillingAddress(ctx context.Context, in *DeleteBillingAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Gets the SPLA price for project
	GetSplaPrice(ctx context.Context, in *GetSplaPriceRequest, opts ...grpc.CallOption) (*GetSplaPriceResponse, error)
}

type userAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAPIClient(cc grpc.ClientConnInterface) UserAPIClient {
	return &userAPIClient{cc}
}

func (c *userAPIClient) GetUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetUserComputeLimit(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserComputeLimitResponse, error) {
	out := new(GetUserComputeLimitResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetUserComputeLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ConfirmEMail(ctx context.Context, in *ConfirmEMailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ConfirmEMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ResendConfirmEMail(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ResendConfirmEMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) BeginWebAuthnRegistration(ctx context.Context, in *BeginWebAuthnRegistrationRequest, opts ...grpc.CallOption) (*BeginWebAuthnRegistrationResponse, error) {
	out := new(BeginWebAuthnRegistrationResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/BeginWebAuthnRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) FinishWebAuthnRegistration(ctx context.Context, in *FinishWebAuthnRegistrationRequest, opts ...grpc.CallOption) (*FinishWebAuthnRegistrationResponse, error) {
	out := new(FinishWebAuthnRegistrationResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/FinishWebAuthnRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteWebAuthnDevice(ctx context.Context, in *DeleteWebAuthnDeviceRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteWebAuthnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListSessions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateLongLivedToken(ctx context.Context, in *CreateLongLivedTokenRequest, opts ...grpc.CallOption) (*LongLivedToken, error) {
	out := new(LongLivedToken)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateLongLivedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListLongLivedTokens(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListLongLivedTokensResponse, error) {
	out := new(ListLongLivedTokensResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListLongLivedTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RevokeLongLivedToken(ctx context.Context, in *RevokeLongLivedTokenRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/RevokeLongLivedToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ChangeDefaultProject(ctx context.Context, in *ChangeDefaultProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ChangeDefaultProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) SubscribeProjectNotifications(ctx context.Context, in *SubscribeProjectNotificationsRequest, opts ...grpc.CallOption) (UserAPI_SubscribeProjectNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAPI_ServiceDesc.Streams[0], "/api.UserAPI/SubscribeProjectNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &userAPISubscribeProjectNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserAPI_SubscribeProjectNotificationsClient interface {
	Recv() (*ProjectNotification, error)
	grpc.ClientStream
}

type userAPISubscribeProjectNotificationsClient struct {
	grpc.ClientStream
}

func (x *userAPISubscribeProjectNotificationsClient) Recv() (*ProjectNotification, error) {
	m := new(ProjectNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAPIClient) GetProjectLogs(ctx context.Context, in *GetProjectLogsRequest, opts ...grpc.CallOption) (*GetProjectLogsResponse, error) {
	out := new(GetProjectLogsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectTraffic(ctx context.Context, in *GetProjectTrafficRequest, opts ...grpc.CallOption) (*GetProjectTrafficResponse, error) {
	out := new(GetProjectTrafficResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectFlavours(ctx context.Context, in *GetProjectFlavoursRequest, opts ...grpc.CallOption) (*GetProjectFlavoursResponse, error) {
	out := new(GetProjectFlavoursResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectFlavours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/api.UserAPI/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) JoinProject(ctx context.Context, in *JoinProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/JoinProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) LeaveProject(ctx context.Context, in *LeaveProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/LeaveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) InviteMemberToProject(ctx context.Context, in *InviteMemberToProjectRequest, opts ...grpc.CallOption) (*InviteMemberToProjectResponse, error) {
	out := new(InviteMemberToProjectResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/InviteMemberToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RemoveMemberFromProject(ctx context.Context, in *RemoveMemberFromProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/RemoveMemberFromProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjects(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectCurrentBillingPreviewPdf(ctx context.Context, in *GetProjectCurrentBillingPreviewPdfRequest, opts ...grpc.CallOption) (*GetProjectCurrentBillingPreviewPdfResponse, error) {
	out := new(GetProjectCurrentBillingPreviewPdfResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectCurrentBillingPreviewPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectBillPdf(ctx context.Context, in *GetProjectBillPdfRequest, opts ...grpc.CallOption) (*GetProjectBillPdfResponse, error) {
	out := new(GetProjectBillPdfResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectBillPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RedeemVoucher(ctx context.Context, in *RedeemVoucherRequest, opts ...grpc.CallOption) (*RedeemVoucherResponse, error) {
	out := new(RedeemVoucherResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/RedeemVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) PayProjectNow(ctx context.Context, in *PayProjectNowRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/PayProjectNow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectCurrentBillingPreview(ctx context.Context, in *GetProjectCurrentBillingPreviewRequest, opts ...grpc.CallOption) (*GetProjectCurrentBillingPreviewResponse, error) {
	out := new(GetProjectCurrentBillingPreviewResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectCurrentBillingPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectsOutstandingBalance(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetProjectsOutstandingBalanceResponse, error) {
	out := new(GetProjectsOutstandingBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectsOutstandingBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectBills(ctx context.Context, in *GetProjectBillsRequest, opts ...grpc.CallOption) (*GetProjectBillsResponse, error) {
	out := new(GetProjectBillsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjectSSHKeys(ctx context.Context, in *ListProjectSSHKeysRequest, opts ...grpc.CallOption) (*ListProjectSSHKeysResponse, error) {
	out := new(ListProjectSSHKeysResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjectSSHKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListUserSSHKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListUserSSHKeysResponse, error) {
	out := new(ListUserSSHKeysResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListUserSSHKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateUserSSHKey(ctx context.Context, in *CreateUserSSHKeyRequest, opts ...grpc.CallOption) (*SSHKey, error) {
	out := new(SSHKey)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateUserSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteUserSSHKey(ctx context.Context, in *DeleteUserSSHKeyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteUserSSHKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateProjectSupportTicket(ctx context.Context, in *CreateProjectSupportTicketRequest, opts ...grpc.CallOption) (*SupportTicket, error) {
	out := new(SupportTicket)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateProjectSupportTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectSupportTicket(ctx context.Context, in *GetProjectSupportTicketRequest, opts ...grpc.CallOption) (*SupportTicket, error) {
	out := new(SupportTicket)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectSupportTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjectSupportTickets(ctx context.Context, in *ListProjectSupportTicketsRequest, opts ...grpc.CallOption) (*ListProjectSupportTicketsResponse, error) {
	out := new(ListProjectSupportTicketsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjectSupportTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CloseProjectSupportTicket(ctx context.Context, in *CloseProjectSupportTicketRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CloseProjectSupportTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) AddProjectSupportTicketComment(ctx context.Context, in *AddProjectSupportTicketCommentRequest, opts ...grpc.CallOption) (*SupportTicket, error) {
	out := new(SupportTicket)
	err := c.cc.Invoke(ctx, "/api.UserAPI/AddProjectSupportTicketComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ChangeProjectSupportPackage(ctx context.Context, in *ChangeProjectSupportPackageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ChangeProjectSupportPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjectSupportPackages(ctx context.Context, in *ListProjectSupportPackagesRequest, opts ...grpc.CallOption) (*ListProjectSupportPackagesResponse, error) {
	out := new(ListProjectSupportPackagesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjectSupportPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateComputeResource(ctx context.Context, in *CreateComputeResourceRequest, opts ...grpc.CallOption) (*CreateComputeResourceResponse, error) {
	out := new(CreateComputeResourceResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListComputeResources(ctx context.Context, in *ListComputeResourcesRequest, opts ...grpc.CallOption) (*ListComputeResourcesResponse, error) {
	out := new(ListComputeResourcesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListComputeResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetComputeResource(ctx context.Context, in *GetComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error) {
	out := new(ComputeResource)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetComputeResourceTraffic(ctx context.Context, in *GetComputeResourceTrafficRequest, opts ...grpc.CallOption) (*GetComputeResourceTrafficResponse, error) {
	out := new(GetComputeResourceTrafficResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetComputeResourceTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateComputeResource(ctx context.Context, in *UpdateComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error) {
	out := new(ComputeResource)
	err := c.cc.Invoke(ctx, "/api.UserAPI/UpdateComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetComputeResourceConsole(ctx context.Context, in *GetComputeResourceConsoleRequest, opts ...grpc.CallOption) (*GetComputeResourceConsoleResponse, error) {
	out := new(GetComputeResourceConsoleResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetComputeResourceConsole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ChangeComputeResourceRescueMode(ctx context.Context, in *ComputeResourceRescueModeRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ChangeComputeResourceRescueMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) PowerActionComputeResource(ctx context.Context, in *PowerActionComputeResourceRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/PowerActionComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ReinstallComputeResource(ctx context.Context, in *ReinstallComputeResourceRequest, opts ...grpc.CallOption) (*ComputeResource, error) {
	out := new(ComputeResource)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ReinstallComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DestroyComputeResource(ctx context.Context, in *DestroyComputeResourceRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DestroyComputeResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjectNetworks(ctx context.Context, in *ListProjectNetworksRequest, opts ...grpc.CallOption) (*ListProjectNetworksResponse, error) {
	out := new(ListProjectNetworksResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjectNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectNetwork(ctx context.Context, in *GetProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateProjectNetwork(ctx context.Context, in *UpdateProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.UserAPI/UpdateProjectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateProjectNetworkSubnet(ctx context.Context, in *CreateProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateProjectNetworkSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) UpdateProjectNetworkSubnet(ctx context.Context, in *UpdateProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/api.UserAPI/UpdateProjectNetworkSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteProjectNetworkSubnet(ctx context.Context, in *DeleteProjectNetworkSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteProjectNetworkSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateProjectImage(ctx context.Context, in *CreateProjectImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateProjectImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListProjectImages(ctx context.Context, in *ListProjectImagesRequest, opts ...grpc.CallOption) (*ListProjectImagesResponse, error) {
	out := new(ListProjectImagesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListProjectImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetProjectImage(ctx context.Context, in *GetProjectImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetProjectImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteProjectImage(ctx context.Context, in *DeleteProjectImageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteProjectImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteProjectImageVersion(ctx context.Context, in *DeleteProjectImageVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteProjectImageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListDataCenters(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListDataCenterResponse, error) {
	out := new(ListDataCenterResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListDataCenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListPublicImages(ctx context.Context, in *ListPublicImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListPublicImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetTwoFactorMethods(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetTwoFactorMethodsResponse, error) {
	out := new(GetTwoFactorMethodsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetTwoFactorMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateTOTP(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CreateTOTPResponse, error) {
	out := new(CreateTOTPResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/RemoveTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) AddTOTP(ctx context.Context, in *AddTOTPRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/AddTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) RegenerateRecoveryCodes(ctx context.Context, in *RegenerateRecoveryCodesRequest, opts ...grpc.CallOption) (*RegenerateRecoveryCodesResponse, error) {
	out := new(RegenerateRecoveryCodesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/RegenerateRecoveryCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListCreditCards(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListCreditCardsResponse, error) {
	out := new(ListCreditCardsResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListCreditCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) AddCreditCard(ctx context.Context, in *AddCreditCardRequest, opts ...grpc.CallOption) (*AddCreditCardResponse, error) {
	out := new(AddCreditCardResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/AddCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteCreditCard(ctx context.Context, in *DeleteCreditCardRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteCreditCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListCountries(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) CreateBillingAddress(ctx context.Context, in *CreateBillingAddressRequest, opts ...grpc.CallOption) (*BillingAddress, error) {
	out := new(BillingAddress)
	err := c.cc.Invoke(ctx, "/api.UserAPI/CreateBillingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) ListBillingAddresses(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBillingAddressesResponse, error) {
	out := new(ListBillingAddressesResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/ListBillingAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) DeleteBillingAddress(ctx context.Context, in *DeleteBillingAddressRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/DeleteBillingAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAPIClient) GetSplaPrice(ctx context.Context, in *GetSplaPriceRequest, opts ...grpc.CallOption) (*GetSplaPriceResponse, error) {
	out := new(GetSplaPriceResponse)
	err := c.cc.Invoke(ctx, "/api.UserAPI/GetSplaPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAPIServer is the server API for UserAPI service.
// All implementations must embed UnimplementedUserAPIServer
// for forward compatibility
type UserAPIServer interface {
	// User profile information
	GetUser(context.Context, *EmptyRequest) (*GetUserResponse, error)
	// Get user compute resource limit
	GetUserComputeLimit(context.Context, *EmptyRequest) (*GetUserComputeLimitResponse, error)
	// Update user profile information
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Confirms the user e-mail address
	ConfirmEMail(context.Context, *ConfirmEMailRequest) (*User, error)
	// Resends the user confirm email
	ResendConfirmEMail(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// Changes the user password
	ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*EmptyResponse, error)
	// Begin a WebAuthn registration
	BeginWebAuthnRegistration(context.Context, *BeginWebAuthnRegistrationRequest) (*BeginWebAuthnRegistrationResponse, error)
	// Finish the WebAuthn registration
	FinishWebAuthnRegistration(context.Context, *FinishWebAuthnRegistrationRequest) (*FinishWebAuthnRegistrationResponse, error)
	// Delete a WebAuthn device
	DeleteWebAuthnDevice(context.Context, *DeleteWebAuthnDeviceRequest) (*EmptyResponse, error)
	// List active user sessions
	ListSessions(context.Context, *EmptyRequest) (*ListSessionsResponse, error)
	// Delete user session
	DeleteSession(context.Context, *DeleteSessionRequest) (*EmptyResponse, error)
	// Creates a new long-lived user token
	//
	// Long-lived user tokens can be used to access the API without the need to refresh the token.
	// Never share this kind of token with 3rd parties, we recommend to store it only in a encrypted way.
	CreateLongLivedToken(context.Context, *CreateLongLivedTokenRequest) (*LongLivedToken, error)
	// List all active long-lived tokens
	ListLongLivedTokens(context.Context, *EmptyRequest) (*ListLongLivedTokensResponse, error)
	// Revokes a long-lived token
	//
	// This directly revokes and token and it can no longer being used or restored.
	RevokeLongLivedToken(context.Context, *RevokeLongLivedTokenRequest) (*EmptyResponse, error)
	// Create a new project
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	// Change default project
	//
	// Changes the default project for the user
	ChangeDefaultProject(context.Context, *ChangeDefaultProjectRequest) (*Project, error)
	// Get a existing project
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	// SubscribeProjectNotifications Subscribes to project notifications
	SubscribeProjectNotifications(*SubscribeProjectNotificationsRequest, UserAPI_SubscribeProjectNotificationsServer) error
	// Show project logs
	GetProjectLogs(context.Context, *GetProjectLogsRequest) (*GetProjectLogsResponse, error)
	// Get project traffic information
	GetProjectTraffic(context.Context, *GetProjectTrafficRequest) (*GetProjectTrafficResponse, error)
	// List all flavours for datacenter and project
	GetProjectFlavours(context.Context, *GetProjectFlavoursRequest) (*GetProjectFlavoursResponse, error)
	// Update a existing project
	UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error)
	// Join a project
	//
	// If you have an open project invite you can accept or decline the invite.
	// On accepting the project will be added to your project list.
	JoinProject(context.Context, *JoinProjectRequest) (*EmptyResponse, error)
	// Leave a project
	//
	// If you have an open project invite you can accept or decline the invite.
	// On accepting the project will be added to your project list.
	LeaveProject(context.Context, *LeaveProjectRequest) (*EmptyResponse, error)
	// Invite a new member to the project
	//
	// You can invite another member to your project by using the e-mail address.
	InviteMemberToProject(context.Context, *InviteMemberToProjectRequest) (*InviteMemberToProjectResponse, error)
	// Removes a member from the project
	RemoveMemberFromProject(context.Context, *RemoveMemberFromProjectRequest) (*EmptyResponse, error)
	// List all projects
	//
	// Returns a list with all your projects and invites.
	ListProjects(context.Context, *EmptyRequest) (*ListProjectsResponse, error)
	// Delete a existing project
	DeleteProject(context.Context, *DeleteProjectRequest) (*EmptyResponse, error)
	// Generates the current billing preview PDF
	//
	// Generates the billing PDF and returns the download url.
	GetProjectCurrentBillingPreviewPdf(context.Context, *GetProjectCurrentBillingPreviewPdfRequest) (*GetProjectCurrentBillingPreviewPdfResponse, error)
	// Get the download URL of a specified bill.
	GetProjectBillPdf(context.Context, *GetProjectBillPdfRequest) (*GetProjectBillPdfResponse, error)
	// Redeem a Voucher
	RedeemVoucher(context.Context, *RedeemVoucherRequest) (*RedeemVoucherResponse, error)
	// Create a final bill for the current month.
	PayProjectNow(context.Context, *PayProjectNowRequest) (*EmptyResponse, error)
	// Shows the current billing preview
	GetProjectCurrentBillingPreview(context.Context, *GetProjectCurrentBillingPreviewRequest) (*GetProjectCurrentBillingPreviewResponse, error)
	// Returns the outstanding balance
	GetProjectsOutstandingBalance(context.Context, *EmptyRequest) (*GetProjectsOutstandingBalanceResponse, error)
	// All project bills by year
	GetProjectBills(context.Context, *GetProjectBillsRequest) (*GetProjectBillsResponse, error)
	// List all SSH authorized keys for project
	ListProjectSSHKeys(context.Context, *ListProjectSSHKeysRequest) (*ListProjectSSHKeysResponse, error)
	// List all SSH authorized keys for user
	ListUserSSHKeys(context.Context, *EmptyRequest) (*ListUserSSHKeysResponse, error)
	// Create new SSH authorized key
	CreateUserSSHKey(context.Context, *CreateUserSSHKeyRequest) (*SSHKey, error)
	// Delete a existing SSH authorized key
	DeleteUserSSHKey(context.Context, *DeleteUserSSHKeyRequest) (*EmptyResponse, error)
	// Create a new support ticket
	CreateProjectSupportTicket(context.Context, *CreateProjectSupportTicketRequest) (*SupportTicket, error)
	// Get support ticket details
	GetProjectSupportTicket(context.Context, *GetProjectSupportTicketRequest) (*SupportTicket, error)
	// List all project support tickets
	ListProjectSupportTickets(context.Context, *ListProjectSupportTicketsRequest) (*ListProjectSupportTicketsResponse, error)
	// Close a support ticket
	CloseProjectSupportTicket(context.Context, *CloseProjectSupportTicketRequest) (*EmptyResponse, error)
	// Add a comment to the ticket
	AddProjectSupportTicketComment(context.Context, *AddProjectSupportTicketCommentRequest) (*SupportTicket, error)
	// Change the current project support package
	ChangeProjectSupportPackage(context.Context, *ChangeProjectSupportPackageRequest) (*EmptyResponse, error)
	// List all available project support packages
	ListProjectSupportPackages(context.Context, *ListProjectSupportPackagesRequest) (*ListProjectSupportPackagesResponse, error)
	// Create compute resources
	//
	// You can only provide one authorization method, please choose password or
	// SSH authorized keys. You can not use both methods at the same request.
	CreateComputeResource(context.Context, *CreateComputeResourceRequest) (*CreateComputeResourceResponse, error)
	// List compute resources
	ListComputeResources(context.Context, *ListComputeResourcesRequest) (*ListComputeResourcesResponse, error)
	// Get a existing compute resource
	GetComputeResource(context.Context, *GetComputeResourceRequest) (*ComputeResource, error)
	// Return compute resource traffic usage
	GetComputeResourceTraffic(context.Context, *GetComputeResourceTrafficRequest) (*GetComputeResourceTrafficResponse, error)
	// Updates a existing compute resource
	UpdateComputeResource(context.Context, *UpdateComputeResourceRequest) (*ComputeResource, error)
	// Get the VNC token for a compute resource
	GetComputeResourceConsole(context.Context, *GetComputeResourceConsoleRequest) (*GetComputeResourceConsoleResponse, error)
	// Changes the compute resource rescue mode
	ChangeComputeResourceRescueMode(context.Context, *ComputeResourceRescueModeRequest) (*EmptyResponse, error)
	// Change compute resource power status
	PowerActionComputeResource(context.Context, *PowerActionComputeResourceRequest) (*EmptyResponse, error)
	// Reinstall the compute resource
	ReinstallComputeResource(context.Context, *ReinstallComputeResourceRequest) (*ComputeResource, error)
	// Destroy the compute resource
	DestroyComputeResource(context.Context, *DestroyComputeResourceRequest) (*EmptyResponse, error)
	// List project networks
	ListProjectNetworks(context.Context, *ListProjectNetworksRequest) (*ListProjectNetworksResponse, error)
	// Get a project network
	GetProjectNetwork(context.Context, *GetProjectNetworkRequest) (*Network, error)
	// Update a project network
	UpdateProjectNetwork(context.Context, *UpdateProjectNetworkRequest) (*Network, error)
	// Create a project network subnet
	CreateProjectNetworkSubnet(context.Context, *CreateProjectNetworkSubnetRequest) (*Subnet, error)
	// Update a project network subnet
	UpdateProjectNetworkSubnet(context.Context, *UpdateProjectNetworkSubnetRequest) (*Subnet, error)
	// Delete a project network subnet
	DeleteProjectNetworkSubnet(context.Context, *DeleteProjectNetworkSubnetRequest) (*EmptyResponse, error)
	// Create a new project image
	CreateProjectImage(context.Context, *CreateProjectImageRequest) (*Image, error)
	// List project images
	ListProjectImages(context.Context, *ListProjectImagesRequest) (*ListProjectImagesResponse, error)
	// Get a project image
	GetProjectImage(context.Context, *GetProjectImageRequest) (*Image, error)
	// Delete a project image
	DeleteProjectImage(context.Context, *DeleteProjectImageRequest) (*EmptyResponse, error)
	// Delete a project image version
	DeleteProjectImageVersion(context.Context, *DeleteProjectImageVersionRequest) (*EmptyResponse, error)
	// List all datacenters with region
	ListDataCenters(context.Context, *EmptyRequest) (*ListDataCenterResponse, error)
	// List all public images for flavour
	ListPublicImages(context.Context, *ListPublicImagesRequest) (*ListImagesResponse, error)
	// List configured two-factor methods
	GetTwoFactorMethods(context.Context, *EmptyRequest) (*GetTwoFactorMethodsResponse, error)
	// Create a TOTP secret and QR code
	CreateTOTP(context.Context, *EmptyRequest) (*CreateTOTPResponse, error)
	// Remove TOTP two-factor method from user account
	RemoveTOTP(context.Context, *RemoveTOTPRequest) (*EmptyResponse, error)
	// Add the TOTP two-factor method
	AddTOTP(context.Context, *AddTOTPRequest) (*EmptyResponse, error)
	// Regenerate two-factor recovery codes
	RegenerateRecoveryCodes(context.Context, *RegenerateRecoveryCodesRequest) (*RegenerateRecoveryCodesResponse, error)
	// List all credit cards
	ListCreditCards(context.Context, *EmptyRequest) (*ListCreditCardsResponse, error)
	// Adds new credit card
	AddCreditCard(context.Context, *AddCreditCardRequest) (*AddCreditCardResponse, error)
	// Delete a existing credit card
	DeleteCreditCard(context.Context, *DeleteCreditCardRequest) (*EmptyResponse, error)
	// List all countries
	//
	// Returns a list with all countries and additional information
	ListCountries(context.Context, *EmptyRequest) (*ListCountriesResponse, error)
	// Create new billing address
	CreateBillingAddress(context.Context, *CreateBillingAddressRequest) (*BillingAddress, error)
	// List all billing addresses
	ListBillingAddresses(context.Context, *EmptyRequest) (*ListBillingAddressesResponse, error)
	// Deletes a billing addresses
	DeleteBillingAddress(context.Context, *DeleteBillingAddressRequest) (*EmptyResponse, error)
	// Gets the SPLA price for project
	GetSplaPrice(context.Context, *GetSplaPriceRequest) (*GetSplaPriceResponse, error)
	mustEmbedUnimplementedUserAPIServer()
}

// UnimplementedUserAPIServer must be embedded to have forward compatible implementations.
type UnimplementedUserAPIServer struct {
}

func (UnimplementedUserAPIServer) GetUser(context.Context, *EmptyRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserAPIServer) GetUserComputeLimit(context.Context, *EmptyRequest) (*GetUserComputeLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserComputeLimit not implemented")
}
func (UnimplementedUserAPIServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserAPIServer) ConfirmEMail(context.Context, *ConfirmEMailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEMail not implemented")
}
func (UnimplementedUserAPIServer) ResendConfirmEMail(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendConfirmEMail not implemented")
}
func (UnimplementedUserAPIServer) ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedUserAPIServer) BeginWebAuthnRegistration(context.Context, *BeginWebAuthnRegistrationRequest) (*BeginWebAuthnRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginWebAuthnRegistration not implemented")
}
func (UnimplementedUserAPIServer) FinishWebAuthnRegistration(context.Context, *FinishWebAuthnRegistrationRequest) (*FinishWebAuthnRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishWebAuthnRegistration not implemented")
}
func (UnimplementedUserAPIServer) DeleteWebAuthnDevice(context.Context, *DeleteWebAuthnDeviceRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebAuthnDevice not implemented")
}
func (UnimplementedUserAPIServer) ListSessions(context.Context, *EmptyRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedUserAPIServer) DeleteSession(context.Context, *DeleteSessionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedUserAPIServer) CreateLongLivedToken(context.Context, *CreateLongLivedTokenRequest) (*LongLivedToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLongLivedToken not implemented")
}
func (UnimplementedUserAPIServer) ListLongLivedTokens(context.Context, *EmptyRequest) (*ListLongLivedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLongLivedTokens not implemented")
}
func (UnimplementedUserAPIServer) RevokeLongLivedToken(context.Context, *RevokeLongLivedTokenRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeLongLivedToken not implemented")
}
func (UnimplementedUserAPIServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedUserAPIServer) ChangeDefaultProject(context.Context, *ChangeDefaultProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDefaultProject not implemented")
}
func (UnimplementedUserAPIServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedUserAPIServer) SubscribeProjectNotifications(*SubscribeProjectNotificationsRequest, UserAPI_SubscribeProjectNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProjectNotifications not implemented")
}
func (UnimplementedUserAPIServer) GetProjectLogs(context.Context, *GetProjectLogsRequest) (*GetProjectLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectLogs not implemented")
}
func (UnimplementedUserAPIServer) GetProjectTraffic(context.Context, *GetProjectTrafficRequest) (*GetProjectTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTraffic not implemented")
}
func (UnimplementedUserAPIServer) GetProjectFlavours(context.Context, *GetProjectFlavoursRequest) (*GetProjectFlavoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectFlavours not implemented")
}
func (UnimplementedUserAPIServer) UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedUserAPIServer) JoinProject(context.Context, *JoinProjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinProject not implemented")
}
func (UnimplementedUserAPIServer) LeaveProject(context.Context, *LeaveProjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveProject not implemented")
}
func (UnimplementedUserAPIServer) InviteMemberToProject(context.Context, *InviteMemberToProjectRequest) (*InviteMemberToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMemberToProject not implemented")
}
func (UnimplementedUserAPIServer) RemoveMemberFromProject(context.Context, *RemoveMemberFromProjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMemberFromProject not implemented")
}
func (UnimplementedUserAPIServer) ListProjects(context.Context, *EmptyRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedUserAPIServer) DeleteProject(context.Context, *DeleteProjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedUserAPIServer) GetProjectCurrentBillingPreviewPdf(context.Context, *GetProjectCurrentBillingPreviewPdfRequest) (*GetProjectCurrentBillingPreviewPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCurrentBillingPreviewPdf not implemented")
}
func (UnimplementedUserAPIServer) GetProjectBillPdf(context.Context, *GetProjectBillPdfRequest) (*GetProjectBillPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectBillPdf not implemented")
}
func (UnimplementedUserAPIServer) RedeemVoucher(context.Context, *RedeemVoucherRequest) (*RedeemVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemVoucher not implemented")
}
func (UnimplementedUserAPIServer) PayProjectNow(context.Context, *PayProjectNowRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayProjectNow not implemented")
}
func (UnimplementedUserAPIServer) GetProjectCurrentBillingPreview(context.Context, *GetProjectCurrentBillingPreviewRequest) (*GetProjectCurrentBillingPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCurrentBillingPreview not implemented")
}
func (UnimplementedUserAPIServer) GetProjectsOutstandingBalance(context.Context, *EmptyRequest) (*GetProjectsOutstandingBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsOutstandingBalance not implemented")
}
func (UnimplementedUserAPIServer) GetProjectBills(context.Context, *GetProjectBillsRequest) (*GetProjectBillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectBills not implemented")
}
func (UnimplementedUserAPIServer) ListProjectSSHKeys(context.Context, *ListProjectSSHKeysRequest) (*ListProjectSSHKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSSHKeys not implemented")
}
func (UnimplementedUserAPIServer) ListUserSSHKeys(context.Context, *EmptyRequest) (*ListUserSSHKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSSHKeys not implemented")
}
func (UnimplementedUserAPIServer) CreateUserSSHKey(context.Context, *CreateUserSSHKeyRequest) (*SSHKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSSHKey not implemented")
}
func (UnimplementedUserAPIServer) DeleteUserSSHKey(context.Context, *DeleteUserSSHKeyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSSHKey not implemented")
}
func (UnimplementedUserAPIServer) CreateProjectSupportTicket(context.Context, *CreateProjectSupportTicketRequest) (*SupportTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectSupportTicket not implemented")
}
func (UnimplementedUserAPIServer) GetProjectSupportTicket(context.Context, *GetProjectSupportTicketRequest) (*SupportTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectSupportTicket not implemented")
}
func (UnimplementedUserAPIServer) ListProjectSupportTickets(context.Context, *ListProjectSupportTicketsRequest) (*ListProjectSupportTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSupportTickets not implemented")
}
func (UnimplementedUserAPIServer) CloseProjectSupportTicket(context.Context, *CloseProjectSupportTicketRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseProjectSupportTicket not implemented")
}
func (UnimplementedUserAPIServer) AddProjectSupportTicketComment(context.Context, *AddProjectSupportTicketCommentRequest) (*SupportTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectSupportTicketComment not implemented")
}
func (UnimplementedUserAPIServer) ChangeProjectSupportPackage(context.Context, *ChangeProjectSupportPackageRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProjectSupportPackage not implemented")
}
func (UnimplementedUserAPIServer) ListProjectSupportPackages(context.Context, *ListProjectSupportPackagesRequest) (*ListProjectSupportPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSupportPackages not implemented")
}
func (UnimplementedUserAPIServer) CreateComputeResource(context.Context, *CreateComputeResourceRequest) (*CreateComputeResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComputeResource not implemented")
}
func (UnimplementedUserAPIServer) ListComputeResources(context.Context, *ListComputeResourcesRequest) (*ListComputeResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComputeResources not implemented")
}
func (UnimplementedUserAPIServer) GetComputeResource(context.Context, *GetComputeResourceRequest) (*ComputeResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputeResource not implemented")
}
func (UnimplementedUserAPIServer) GetComputeResourceTraffic(context.Context, *GetComputeResourceTrafficRequest) (*GetComputeResourceTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputeResourceTraffic not implemented")
}
func (UnimplementedUserAPIServer) UpdateComputeResource(context.Context, *UpdateComputeResourceRequest) (*ComputeResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComputeResource not implemented")
}
func (UnimplementedUserAPIServer) GetComputeResourceConsole(context.Context, *GetComputeResourceConsoleRequest) (*GetComputeResourceConsoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputeResourceConsole not implemented")
}
func (UnimplementedUserAPIServer) ChangeComputeResourceRescueMode(context.Context, *ComputeResourceRescueModeRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeComputeResourceRescueMode not implemented")
}
func (UnimplementedUserAPIServer) PowerActionComputeResource(context.Context, *PowerActionComputeResourceRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerActionComputeResource not implemented")
}
func (UnimplementedUserAPIServer) ReinstallComputeResource(context.Context, *ReinstallComputeResourceRequest) (*ComputeResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReinstallComputeResource not implemented")
}
func (UnimplementedUserAPIServer) DestroyComputeResource(context.Context, *DestroyComputeResourceRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyComputeResource not implemented")
}
func (UnimplementedUserAPIServer) ListProjectNetworks(context.Context, *ListProjectNetworksRequest) (*ListProjectNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectNetworks not implemented")
}
func (UnimplementedUserAPIServer) GetProjectNetwork(context.Context, *GetProjectNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectNetwork not implemented")
}
func (UnimplementedUserAPIServer) UpdateProjectNetwork(context.Context, *UpdateProjectNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectNetwork not implemented")
}
func (UnimplementedUserAPIServer) CreateProjectNetworkSubnet(context.Context, *CreateProjectNetworkSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectNetworkSubnet not implemented")
}
func (UnimplementedUserAPIServer) UpdateProjectNetworkSubnet(context.Context, *UpdateProjectNetworkSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectNetworkSubnet not implemented")
}
func (UnimplementedUserAPIServer) DeleteProjectNetworkSubnet(context.Context, *DeleteProjectNetworkSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectNetworkSubnet not implemented")
}
func (UnimplementedUserAPIServer) CreateProjectImage(context.Context, *CreateProjectImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectImage not implemented")
}
func (UnimplementedUserAPIServer) ListProjectImages(context.Context, *ListProjectImagesRequest) (*ListProjectImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectImages not implemented")
}
func (UnimplementedUserAPIServer) GetProjectImage(context.Context, *GetProjectImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectImage not implemented")
}
func (UnimplementedUserAPIServer) DeleteProjectImage(context.Context, *DeleteProjectImageRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectImage not implemented")
}
func (UnimplementedUserAPIServer) DeleteProjectImageVersion(context.Context, *DeleteProjectImageVersionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectImageVersion not implemented")
}
func (UnimplementedUserAPIServer) ListDataCenters(context.Context, *EmptyRequest) (*ListDataCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataCenters not implemented")
}
func (UnimplementedUserAPIServer) ListPublicImages(context.Context, *ListPublicImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicImages not implemented")
}
func (UnimplementedUserAPIServer) GetTwoFactorMethods(context.Context, *EmptyRequest) (*GetTwoFactorMethodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwoFactorMethods not implemented")
}
func (UnimplementedUserAPIServer) CreateTOTP(context.Context, *EmptyRequest) (*CreateTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTOTP not implemented")
}
func (UnimplementedUserAPIServer) RemoveTOTP(context.Context, *RemoveTOTPRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTOTP not implemented")
}
func (UnimplementedUserAPIServer) AddTOTP(context.Context, *AddTOTPRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTOTP not implemented")
}
func (UnimplementedUserAPIServer) RegenerateRecoveryCodes(context.Context, *RegenerateRecoveryCodesRequest) (*RegenerateRecoveryCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateRecoveryCodes not implemented")
}
func (UnimplementedUserAPIServer) ListCreditCards(context.Context, *EmptyRequest) (*ListCreditCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditCards not implemented")
}
func (UnimplementedUserAPIServer) AddCreditCard(context.Context, *AddCreditCardRequest) (*AddCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreditCard not implemented")
}
func (UnimplementedUserAPIServer) DeleteCreditCard(context.Context, *DeleteCreditCardRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCreditCard not implemented")
}
func (UnimplementedUserAPIServer) ListCountries(context.Context, *EmptyRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedUserAPIServer) CreateBillingAddress(context.Context, *CreateBillingAddressRequest) (*BillingAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingAddress not implemented")
}
func (UnimplementedUserAPIServer) ListBillingAddresses(context.Context, *EmptyRequest) (*ListBillingAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingAddresses not implemented")
}
func (UnimplementedUserAPIServer) DeleteBillingAddress(context.Context, *DeleteBillingAddressRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillingAddress not implemented")
}
func (UnimplementedUserAPIServer) GetSplaPrice(context.Context, *GetSplaPriceRequest) (*GetSplaPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSplaPrice not implemented")
}
func (UnimplementedUserAPIServer) mustEmbedUnimplementedUserAPIServer() {}

// UnsafeUserAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAPIServer will
// result in compilation errors.
type UnsafeUserAPIServer interface {
	mustEmbedUnimplementedUserAPIServer()
}

func RegisterUserAPIServer(s grpc.ServiceRegistrar, srv UserAPIServer) {
	s.RegisterService(&UserAPI_ServiceDesc, srv)
}

func _UserAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUser(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetUserComputeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetUserComputeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetUserComputeLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetUserComputeLimit(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ConfirmEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ConfirmEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ConfirmEMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ConfirmEMail(ctx, req.(*ConfirmEMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ResendConfirmEMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ResendConfirmEMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ResendConfirmEMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ResendConfirmEMail(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_BeginWebAuthnRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginWebAuthnRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).BeginWebAuthnRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/BeginWebAuthnRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).BeginWebAuthnRegistration(ctx, req.(*BeginWebAuthnRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_FinishWebAuthnRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishWebAuthnRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).FinishWebAuthnRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/FinishWebAuthnRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).FinishWebAuthnRegistration(ctx, req.(*FinishWebAuthnRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteWebAuthnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebAuthnDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteWebAuthnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteWebAuthnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteWebAuthnDevice(ctx, req.(*DeleteWebAuthnDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListSessions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateLongLivedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLongLivedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateLongLivedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateLongLivedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateLongLivedToken(ctx, req.(*CreateLongLivedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListLongLivedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListLongLivedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListLongLivedTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListLongLivedTokens(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RevokeLongLivedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeLongLivedTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RevokeLongLivedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/RevokeLongLivedToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RevokeLongLivedToken(ctx, req.(*RevokeLongLivedTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ChangeDefaultProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDefaultProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ChangeDefaultProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ChangeDefaultProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ChangeDefaultProject(ctx, req.(*ChangeDefaultProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_SubscribeProjectNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeProjectNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserAPIServer).SubscribeProjectNotifications(m, &userAPISubscribeProjectNotificationsServer{stream})
}

type UserAPI_SubscribeProjectNotificationsServer interface {
	Send(*ProjectNotification) error
	grpc.ServerStream
}

type userAPISubscribeProjectNotificationsServer struct {
	grpc.ServerStream
}

func (x *userAPISubscribeProjectNotificationsServer) Send(m *ProjectNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _UserAPI_GetProjectLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectLogs(ctx, req.(*GetProjectLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectTraffic(ctx, req.(*GetProjectTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectFlavours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectFlavoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectFlavours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectFlavours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectFlavours(ctx, req.(*GetProjectFlavoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_JoinProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).JoinProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/JoinProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).JoinProject(ctx, req.(*JoinProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_LeaveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).LeaveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/LeaveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).LeaveProject(ctx, req.(*LeaveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_InviteMemberToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).InviteMemberToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/InviteMemberToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).InviteMemberToProject(ctx, req.(*InviteMemberToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RemoveMemberFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RemoveMemberFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/RemoveMemberFromProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RemoveMemberFromProject(ctx, req.(*RemoveMemberFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjects(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectCurrentBillingPreviewPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectCurrentBillingPreviewPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectCurrentBillingPreviewPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectCurrentBillingPreviewPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectCurrentBillingPreviewPdf(ctx, req.(*GetProjectCurrentBillingPreviewPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectBillPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectBillPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectBillPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectBillPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectBillPdf(ctx, req.(*GetProjectBillPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RedeemVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RedeemVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/RedeemVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RedeemVoucher(ctx, req.(*RedeemVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_PayProjectNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayProjectNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).PayProjectNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/PayProjectNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).PayProjectNow(ctx, req.(*PayProjectNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectCurrentBillingPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectCurrentBillingPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectCurrentBillingPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectCurrentBillingPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectCurrentBillingPreview(ctx, req.(*GetProjectCurrentBillingPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectsOutstandingBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectsOutstandingBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectsOutstandingBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectsOutstandingBalance(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectBills(ctx, req.(*GetProjectBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjectSSHKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectSSHKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjectSSHKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjectSSHKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjectSSHKeys(ctx, req.(*ListProjectSSHKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListUserSSHKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListUserSSHKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListUserSSHKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListUserSSHKeys(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateUserSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSSHKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateUserSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateUserSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateUserSSHKey(ctx, req.(*CreateUserSSHKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteUserSSHKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSSHKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteUserSSHKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteUserSSHKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteUserSSHKey(ctx, req.(*DeleteUserSSHKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateProjectSupportTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectSupportTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateProjectSupportTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateProjectSupportTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateProjectSupportTicket(ctx, req.(*CreateProjectSupportTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectSupportTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectSupportTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectSupportTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectSupportTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectSupportTicket(ctx, req.(*GetProjectSupportTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjectSupportTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectSupportTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjectSupportTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjectSupportTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjectSupportTickets(ctx, req.(*ListProjectSupportTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CloseProjectSupportTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseProjectSupportTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CloseProjectSupportTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CloseProjectSupportTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CloseProjectSupportTicket(ctx, req.(*CloseProjectSupportTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_AddProjectSupportTicketComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectSupportTicketCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).AddProjectSupportTicketComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/AddProjectSupportTicketComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).AddProjectSupportTicketComment(ctx, req.(*AddProjectSupportTicketCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ChangeProjectSupportPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProjectSupportPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ChangeProjectSupportPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ChangeProjectSupportPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ChangeProjectSupportPackage(ctx, req.(*ChangeProjectSupportPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjectSupportPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectSupportPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjectSupportPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjectSupportPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjectSupportPackages(ctx, req.(*ListProjectSupportPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateComputeResource(ctx, req.(*CreateComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListComputeResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComputeResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListComputeResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListComputeResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListComputeResources(ctx, req.(*ListComputeResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetComputeResource(ctx, req.(*GetComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetComputeResourceTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeResourceTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetComputeResourceTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetComputeResourceTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetComputeResourceTraffic(ctx, req.(*GetComputeResourceTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/UpdateComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateComputeResource(ctx, req.(*UpdateComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetComputeResourceConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeResourceConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetComputeResourceConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetComputeResourceConsole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetComputeResourceConsole(ctx, req.(*GetComputeResourceConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ChangeComputeResourceRescueMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeResourceRescueModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ChangeComputeResourceRescueMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ChangeComputeResourceRescueMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ChangeComputeResourceRescueMode(ctx, req.(*ComputeResourceRescueModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_PowerActionComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerActionComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).PowerActionComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/PowerActionComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).PowerActionComputeResource(ctx, req.(*PowerActionComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ReinstallComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReinstallComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ReinstallComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ReinstallComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ReinstallComputeResource(ctx, req.(*ReinstallComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DestroyComputeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyComputeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DestroyComputeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DestroyComputeResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DestroyComputeResource(ctx, req.(*DestroyComputeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjectNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjectNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjectNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjectNetworks(ctx, req.(*ListProjectNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectNetwork(ctx, req.(*GetProjectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateProjectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateProjectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/UpdateProjectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateProjectNetwork(ctx, req.(*UpdateProjectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateProjectNetworkSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectNetworkSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateProjectNetworkSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateProjectNetworkSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateProjectNetworkSubnet(ctx, req.(*CreateProjectNetworkSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_UpdateProjectNetworkSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectNetworkSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).UpdateProjectNetworkSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/UpdateProjectNetworkSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).UpdateProjectNetworkSubnet(ctx, req.(*UpdateProjectNetworkSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteProjectNetworkSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectNetworkSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteProjectNetworkSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteProjectNetworkSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteProjectNetworkSubnet(ctx, req.(*DeleteProjectNetworkSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateProjectImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateProjectImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateProjectImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateProjectImage(ctx, req.(*CreateProjectImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListProjectImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListProjectImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListProjectImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListProjectImages(ctx, req.(*ListProjectImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetProjectImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetProjectImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetProjectImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetProjectImage(ctx, req.(*GetProjectImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteProjectImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteProjectImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteProjectImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteProjectImage(ctx, req.(*DeleteProjectImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteProjectImageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectImageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteProjectImageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteProjectImageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteProjectImageVersion(ctx, req.(*DeleteProjectImageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListDataCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListDataCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListDataCenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListDataCenters(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListPublicImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListPublicImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListPublicImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListPublicImages(ctx, req.(*ListPublicImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetTwoFactorMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetTwoFactorMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetTwoFactorMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetTwoFactorMethods(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateTOTP(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RemoveTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RemoveTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/RemoveTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RemoveTOTP(ctx, req.(*RemoveTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_AddTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).AddTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/AddTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).AddTOTP(ctx, req.(*AddTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_RegenerateRecoveryCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateRecoveryCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).RegenerateRecoveryCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/RegenerateRecoveryCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).RegenerateRecoveryCodes(ctx, req.(*RegenerateRecoveryCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListCreditCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListCreditCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListCreditCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListCreditCards(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_AddCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).AddCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/AddCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).AddCreditCard(ctx, req.(*AddCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteCreditCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteCreditCard(ctx, req.(*DeleteCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListCountries(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_CreateBillingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).CreateBillingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/CreateBillingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).CreateBillingAddress(ctx, req.(*CreateBillingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_ListBillingAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).ListBillingAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/ListBillingAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).ListBillingAddresses(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_DeleteBillingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).DeleteBillingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/DeleteBillingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).DeleteBillingAddress(ctx, req.(*DeleteBillingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAPI_GetSplaPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSplaPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAPIServer).GetSplaPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserAPI/GetSplaPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAPIServer).GetSplaPrice(ctx, req.(*GetSplaPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAPI_ServiceDesc is the grpc.ServiceDesc for UserAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserAPI",
	HandlerType: (*UserAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserAPI_GetUser_Handler,
		},
		{
			MethodName: "GetUserComputeLimit",
			Handler:    _UserAPI_GetUserComputeLimit_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserAPI_UpdateUser_Handler,
		},
		{
			MethodName: "ConfirmEMail",
			Handler:    _UserAPI_ConfirmEMail_Handler,
		},
		{
			MethodName: "ResendConfirmEMail",
			Handler:    _UserAPI_ResendConfirmEMail_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _UserAPI_ChangeUserPassword_Handler,
		},
		{
			MethodName: "BeginWebAuthnRegistration",
			Handler:    _UserAPI_BeginWebAuthnRegistration_Handler,
		},
		{
			MethodName: "FinishWebAuthnRegistration",
			Handler:    _UserAPI_FinishWebAuthnRegistration_Handler,
		},
		{
			MethodName: "DeleteWebAuthnDevice",
			Handler:    _UserAPI_DeleteWebAuthnDevice_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _UserAPI_ListSessions_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _UserAPI_DeleteSession_Handler,
		},
		{
			MethodName: "CreateLongLivedToken",
			Handler:    _UserAPI_CreateLongLivedToken_Handler,
		},
		{
			MethodName: "ListLongLivedTokens",
			Handler:    _UserAPI_ListLongLivedTokens_Handler,
		},
		{
			MethodName: "RevokeLongLivedToken",
			Handler:    _UserAPI_RevokeLongLivedToken_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _UserAPI_CreateProject_Handler,
		},
		{
			MethodName: "ChangeDefaultProject",
			Handler:    _UserAPI_ChangeDefaultProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _UserAPI_GetProject_Handler,
		},
		{
			MethodName: "GetProjectLogs",
			Handler:    _UserAPI_GetProjectLogs_Handler,
		},
		{
			MethodName: "GetProjectTraffic",
			Handler:    _UserAPI_GetProjectTraffic_Handler,
		},
		{
			MethodName: "GetProjectFlavours",
			Handler:    _UserAPI_GetProjectFlavours_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _UserAPI_UpdateProject_Handler,
		},
		{
			MethodName: "JoinProject",
			Handler:    _UserAPI_JoinProject_Handler,
		},
		{
			MethodName: "LeaveProject",
			Handler:    _UserAPI_LeaveProject_Handler,
		},
		{
			MethodName: "InviteMemberToProject",
			Handler:    _UserAPI_InviteMemberToProject_Handler,
		},
		{
			MethodName: "RemoveMemberFromProject",
			Handler:    _UserAPI_RemoveMemberFromProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _UserAPI_ListProjects_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _UserAPI_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectCurrentBillingPreviewPdf",
			Handler:    _UserAPI_GetProjectCurrentBillingPreviewPdf_Handler,
		},
		{
			MethodName: "GetProjectBillPdf",
			Handler:    _UserAPI_GetProjectBillPdf_Handler,
		},
		{
			MethodName: "RedeemVoucher",
			Handler:    _UserAPI_RedeemVoucher_Handler,
		},
		{
			MethodName: "PayProjectNow",
			Handler:    _UserAPI_PayProjectNow_Handler,
		},
		{
			MethodName: "GetProjectCurrentBillingPreview",
			Handler:    _UserAPI_GetProjectCurrentBillingPreview_Handler,
		},
		{
			MethodName: "GetProjectsOutstandingBalance",
			Handler:    _UserAPI_GetProjectsOutstandingBalance_Handler,
		},
		{
			MethodName: "GetProjectBills",
			Handler:    _UserAPI_GetProjectBills_Handler,
		},
		{
			MethodName: "ListProjectSSHKeys",
			Handler:    _UserAPI_ListProjectSSHKeys_Handler,
		},
		{
			MethodName: "ListUserSSHKeys",
			Handler:    _UserAPI_ListUserSSHKeys_Handler,
		},
		{
			MethodName: "CreateUserSSHKey",
			Handler:    _UserAPI_CreateUserSSHKey_Handler,
		},
		{
			MethodName: "DeleteUserSSHKey",
			Handler:    _UserAPI_DeleteUserSSHKey_Handler,
		},
		{
			MethodName: "CreateProjectSupportTicket",
			Handler:    _UserAPI_CreateProjectSupportTicket_Handler,
		},
		{
			MethodName: "GetProjectSupportTicket",
			Handler:    _UserAPI_GetProjectSupportTicket_Handler,
		},
		{
			MethodName: "ListProjectSupportTickets",
			Handler:    _UserAPI_ListProjectSupportTickets_Handler,
		},
		{
			MethodName: "CloseProjectSupportTicket",
			Handler:    _UserAPI_CloseProjectSupportTicket_Handler,
		},
		{
			MethodName: "AddProjectSupportTicketComment",
			Handler:    _UserAPI_AddProjectSupportTicketComment_Handler,
		},
		{
			MethodName: "ChangeProjectSupportPackage",
			Handler:    _UserAPI_ChangeProjectSupportPackage_Handler,
		},
		{
			MethodName: "ListProjectSupportPackages",
			Handler:    _UserAPI_ListProjectSupportPackages_Handler,
		},
		{
			MethodName: "CreateComputeResource",
			Handler:    _UserAPI_CreateComputeResource_Handler,
		},
		{
			MethodName: "ListComputeResources",
			Handler:    _UserAPI_ListComputeResources_Handler,
		},
		{
			MethodName: "GetComputeResource",
			Handler:    _UserAPI_GetComputeResource_Handler,
		},
		{
			MethodName: "GetComputeResourceTraffic",
			Handler:    _UserAPI_GetComputeResourceTraffic_Handler,
		},
		{
			MethodName: "UpdateComputeResource",
			Handler:    _UserAPI_UpdateComputeResource_Handler,
		},
		{
			MethodName: "GetComputeResourceConsole",
			Handler:    _UserAPI_GetComputeResourceConsole_Handler,
		},
		{
			MethodName: "ChangeComputeResourceRescueMode",
			Handler:    _UserAPI_ChangeComputeResourceRescueMode_Handler,
		},
		{
			MethodName: "PowerActionComputeResource",
			Handler:    _UserAPI_PowerActionComputeResource_Handler,
		},
		{
			MethodName: "ReinstallComputeResource",
			Handler:    _UserAPI_ReinstallComputeResource_Handler,
		},
		{
			MethodName: "DestroyComputeResource",
			Handler:    _UserAPI_DestroyComputeResource_Handler,
		},
		{
			MethodName: "ListProjectNetworks",
			Handler:    _UserAPI_ListProjectNetworks_Handler,
		},
		{
			MethodName: "GetProjectNetwork",
			Handler:    _UserAPI_GetProjectNetwork_Handler,
		},
		{
			MethodName: "UpdateProjectNetwork",
			Handler:    _UserAPI_UpdateProjectNetwork_Handler,
		},
		{
			MethodName: "CreateProjectNetworkSubnet",
			Handler:    _UserAPI_CreateProjectNetworkSubnet_Handler,
		},
		{
			MethodName: "UpdateProjectNetworkSubnet",
			Handler:    _UserAPI_UpdateProjectNetworkSubnet_Handler,
		},
		{
			MethodName: "DeleteProjectNetworkSubnet",
			Handler:    _UserAPI_DeleteProjectNetworkSubnet_Handler,
		},
		{
			MethodName: "CreateProjectImage",
			Handler:    _UserAPI_CreateProjectImage_Handler,
		},
		{
			MethodName: "ListProjectImages",
			Handler:    _UserAPI_ListProjectImages_Handler,
		},
		{
			MethodName: "GetProjectImage",
			Handler:    _UserAPI_GetProjectImage_Handler,
		},
		{
			MethodName: "DeleteProjectImage",
			Handler:    _UserAPI_DeleteProjectImage_Handler,
		},
		{
			MethodName: "DeleteProjectImageVersion",
			Handler:    _UserAPI_DeleteProjectImageVersion_Handler,
		},
		{
			MethodName: "ListDataCenters",
			Handler:    _UserAPI_ListDataCenters_Handler,
		},
		{
			MethodName: "ListPublicImages",
			Handler:    _UserAPI_ListPublicImages_Handler,
		},
		{
			MethodName: "GetTwoFactorMethods",
			Handler:    _UserAPI_GetTwoFactorMethods_Handler,
		},
		{
			MethodName: "CreateTOTP",
			Handler:    _UserAPI_CreateTOTP_Handler,
		},
		{
			MethodName: "RemoveTOTP",
			Handler:    _UserAPI_RemoveTOTP_Handler,
		},
		{
			MethodName: "AddTOTP",
			Handler:    _UserAPI_AddTOTP_Handler,
		},
		{
			MethodName: "RegenerateRecoveryCodes",
			Handler:    _UserAPI_RegenerateRecoveryCodes_Handler,
		},
		{
			MethodName: "ListCreditCards",
			Handler:    _UserAPI_ListCreditCards_Handler,
		},
		{
			MethodName: "AddCreditCard",
			Handler:    _UserAPI_AddCreditCard_Handler,
		},
		{
			MethodName: "DeleteCreditCard",
			Handler:    _UserAPI_DeleteCreditCard_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _UserAPI_ListCountries_Handler,
		},
		{
			MethodName: "CreateBillingAddress",
			Handler:    _UserAPI_CreateBillingAddress_Handler,
		},
		{
			MethodName: "ListBillingAddresses",
			Handler:    _UserAPI_ListBillingAddresses_Handler,
		},
		{
			MethodName: "DeleteBillingAddress",
			Handler:    _UserAPI_DeleteBillingAddress_Handler,
		},
		{
			MethodName: "GetSplaPrice",
			Handler:    _UserAPI_GetSplaPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeProjectNotifications",
			Handler:       _UserAPI_SubscribeProjectNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// GatewayAPIClient is the client API for GatewayAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAPIClient interface {
	// GetVnc Get VNC server information by token
	GetVnc(ctx context.Context, in *GetVNCRequest, opts ...grpc.CallOption) (*GetVNCResponse, error)
	// Get JWT Public Key List
	ListJwtPublicKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListJwtPublicKeysResponse, error)
	// ImageUploadValidate Validate a image upload token
	ImageUploadValidate(ctx context.Context, in *ValidateImageUploadTokenRequest, opts ...grpc.CallOption) (*ImageVersion, error)
	// ImageUploadConfirm Confirms the successful upload of a image
	ImageUploadConfirm(ctx context.Context, in *ConfirmImageUploadRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type gatewayAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAPIClient(cc grpc.ClientConnInterface) GatewayAPIClient {
	return &gatewayAPIClient{cc}
}

func (c *gatewayAPIClient) GetVnc(ctx context.Context, in *GetVNCRequest, opts ...grpc.CallOption) (*GetVNCResponse, error) {
	out := new(GetVNCResponse)
	err := c.cc.Invoke(ctx, "/api.GatewayAPI/GetVnc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ListJwtPublicKeys(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListJwtPublicKeysResponse, error) {
	out := new(ListJwtPublicKeysResponse)
	err := c.cc.Invoke(ctx, "/api.GatewayAPI/ListJwtPublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ImageUploadValidate(ctx context.Context, in *ValidateImageUploadTokenRequest, opts ...grpc.CallOption) (*ImageVersion, error) {
	out := new(ImageVersion)
	err := c.cc.Invoke(ctx, "/api.GatewayAPI/ImageUploadValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAPIClient) ImageUploadConfirm(ctx context.Context, in *ConfirmImageUploadRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.GatewayAPI/ImageUploadConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAPIServer is the server API for GatewayAPI service.
// All implementations must embed UnimplementedGatewayAPIServer
// for forward compatibility
type GatewayAPIServer interface {
	// GetVnc Get VNC server information by token
	GetVnc(context.Context, *GetVNCRequest) (*GetVNCResponse, error)
	// Get JWT Public Key List
	ListJwtPublicKeys(context.Context, *EmptyRequest) (*ListJwtPublicKeysResponse, error)
	// ImageUploadValidate Validate a image upload token
	ImageUploadValidate(context.Context, *ValidateImageUploadTokenRequest) (*ImageVersion, error)
	// ImageUploadConfirm Confirms the successful upload of a image
	ImageUploadConfirm(context.Context, *ConfirmImageUploadRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedGatewayAPIServer()
}

// UnimplementedGatewayAPIServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAPIServer struct {
}

func (UnimplementedGatewayAPIServer) GetVnc(context.Context, *GetVNCRequest) (*GetVNCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVnc not implemented")
}
func (UnimplementedGatewayAPIServer) ListJwtPublicKeys(context.Context, *EmptyRequest) (*ListJwtPublicKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJwtPublicKeys not implemented")
}
func (UnimplementedGatewayAPIServer) ImageUploadValidate(context.Context, *ValidateImageUploadTokenRequest) (*ImageVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUploadValidate not implemented")
}
func (UnimplementedGatewayAPIServer) ImageUploadConfirm(context.Context, *ConfirmImageUploadRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUploadConfirm not implemented")
}
func (UnimplementedGatewayAPIServer) mustEmbedUnimplementedGatewayAPIServer() {}

// UnsafeGatewayAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAPIServer will
// result in compilation errors.
type UnsafeGatewayAPIServer interface {
	mustEmbedUnimplementedGatewayAPIServer()
}

func RegisterGatewayAPIServer(s grpc.ServiceRegistrar, srv GatewayAPIServer) {
	s.RegisterService(&GatewayAPI_ServiceDesc, srv)
}

func _GatewayAPI_GetVnc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVNCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).GetVnc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayAPI/GetVnc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).GetVnc(ctx, req.(*GetVNCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ListJwtPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ListJwtPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayAPI/ListJwtPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ListJwtPublicKeys(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ImageUploadValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateImageUploadTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ImageUploadValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayAPI/ImageUploadValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ImageUploadValidate(ctx, req.(*ValidateImageUploadTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAPI_ImageUploadConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmImageUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAPIServer).ImageUploadConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayAPI/ImageUploadConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAPIServer).ImageUploadConfirm(ctx, req.(*ConfirmImageUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayAPI_ServiceDesc is the grpc.ServiceDesc for GatewayAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GatewayAPI",
	HandlerType: (*GatewayAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVnc",
			Handler:    _GatewayAPI_GetVnc_Handler,
		},
		{
			MethodName: "ListJwtPublicKeys",
			Handler:    _GatewayAPI_ListJwtPublicKeys_Handler,
		},
		{
			MethodName: "ImageUploadValidate",
			Handler:    _GatewayAPI_ImageUploadValidate_Handler,
		},
		{
			MethodName: "ImageUploadConfirm",
			Handler:    _GatewayAPI_ImageUploadConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ServiceAPIClient is the client API for ServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAPIClient interface {
	// Requests the metadata information from Backend
	GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*Metadata, error)
	// Requests password information from backend
	GetMetadataPassword(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataPasswordResponse, error)
	// GetNetworkBootData Returns all information for network boot
	GetNetworkBootData(ctx context.Context, in *NetworkBootDataRequest, opts ...grpc.CallOption) (*NetworkBootDataResponse, error)
	// GetDHCPNetworks Returns all DHCP network information
	GetDHCPNetworks(ctx context.Context, in *DHCPNetworksRequest, opts ...grpc.CallOption) (*DHCPNetworksResponse, error)
	// ListSwitches List all switches for agent
	ListSwitches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// ListSwitches List all switches for agent
	UpdateMacAddressMapping(ctx context.Context, in *UpdateMacAddressMappingRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// GetAutoRunScript Get auto-run script for server
	GetAutoRunScript(ctx context.Context, in *GetAutoRunScriptRequest, opts ...grpc.CallOption) (*GetAutoRunScriptResponse, error)
	// PostProvisioningCallback Post provisioning callback
	PostProvisioningCallback(ctx context.Context, in *PostProvisioningCallbackRequest, opts ...grpc.CallOption) (*PostProvisioningCallbackResponse, error)
	// FinishProvisioningCallback Post provisioning callback
	FinishProvisioningCallback(ctx context.Context, in *FinishProvisioningCallbackRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// PostDeprovisioningCallback Post deprovisioning callback
	PostDeprovisioningCallback(ctx context.Context, in *PostDeprovisioningCallbackRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ListMonitoringTargets Returns all monitoring targets
	ListMonitoringTargets(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListMonitoringTargetsResponse, error)
	// UpdateMonitoringStatus Update monitoring status on backend
	UpdateMonitoringStatus(ctx context.Context, in *UpdateMonitoringStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ListPlatformManagements List all platform managements for agent
	ListPlatformManagements(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListPlatformManagementsResponse, error)
}

type serviceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAPIClient(cc grpc.ClientConnInterface) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) GetMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetMetadataPassword(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataPasswordResponse, error) {
	out := new(MetadataPasswordResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/GetMetadataPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetNetworkBootData(ctx context.Context, in *NetworkBootDataRequest, opts ...grpc.CallOption) (*NetworkBootDataResponse, error) {
	out := new(NetworkBootDataResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/GetNetworkBootData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetDHCPNetworks(ctx context.Context, in *DHCPNetworksRequest, opts ...grpc.CallOption) (*DHCPNetworksResponse, error) {
	out := new(DHCPNetworksResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/GetDHCPNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListSwitches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) UpdateMacAddressMapping(ctx context.Context, in *UpdateMacAddressMappingRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/UpdateMacAddressMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetAutoRunScript(ctx context.Context, in *GetAutoRunScriptRequest, opts ...grpc.CallOption) (*GetAutoRunScriptResponse, error) {
	out := new(GetAutoRunScriptResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/GetAutoRunScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) PostProvisioningCallback(ctx context.Context, in *PostProvisioningCallbackRequest, opts ...grpc.CallOption) (*PostProvisioningCallbackResponse, error) {
	out := new(PostProvisioningCallbackResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/PostProvisioningCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) FinishProvisioningCallback(ctx context.Context, in *FinishProvisioningCallbackRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/FinishProvisioningCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) PostDeprovisioningCallback(ctx context.Context, in *PostDeprovisioningCallbackRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/PostDeprovisioningCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListMonitoringTargets(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListMonitoringTargetsResponse, error) {
	out := new(ListMonitoringTargetsResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/ListMonitoringTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) UpdateMonitoringStatus(ctx context.Context, in *UpdateMonitoringStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/UpdateMonitoringStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListPlatformManagements(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListPlatformManagementsResponse, error) {
	out := new(ListPlatformManagementsResponse)
	err := c.cc.Invoke(ctx, "/api.ServiceAPI/ListPlatformManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAPIServer is the server API for ServiceAPI service.
// All implementations must embed UnimplementedServiceAPIServer
// for forward compatibility
type ServiceAPIServer interface {
	// Requests the metadata information from Backend
	GetMetadata(context.Context, *MetadataRequest) (*Metadata, error)
	// Requests password information from backend
	GetMetadataPassword(context.Context, *MetadataRequest) (*MetadataPasswordResponse, error)
	// GetNetworkBootData Returns all information for network boot
	GetNetworkBootData(context.Context, *NetworkBootDataRequest) (*NetworkBootDataResponse, error)
	// GetDHCPNetworks Returns all DHCP network information
	GetDHCPNetworks(context.Context, *DHCPNetworksRequest) (*DHCPNetworksResponse, error)
	// ListSwitches List all switches for agent
	ListSwitches(context.Context, *EmptyRequest) (*ListSwitchesResponse, error)
	// ListSwitches List all switches for agent
	UpdateMacAddressMapping(context.Context, *UpdateMacAddressMappingRequest) (*EmptyResponse, error)
	// GetAutoRunScript Get auto-run script for server
	GetAutoRunScript(context.Context, *GetAutoRunScriptRequest) (*GetAutoRunScriptResponse, error)
	// PostProvisioningCallback Post provisioning callback
	PostProvisioningCallback(context.Context, *PostProvisioningCallbackRequest) (*PostProvisioningCallbackResponse, error)
	// FinishProvisioningCallback Post provisioning callback
	FinishProvisioningCallback(context.Context, *FinishProvisioningCallbackRequest) (*EmptyResponse, error)
	// PostDeprovisioningCallback Post deprovisioning callback
	PostDeprovisioningCallback(context.Context, *PostDeprovisioningCallbackRequest) (*EmptyResponse, error)
	// ListMonitoringTargets Returns all monitoring targets
	ListMonitoringTargets(context.Context, *EmptyRequest) (*ListMonitoringTargetsResponse, error)
	// UpdateMonitoringStatus Update monitoring status on backend
	UpdateMonitoringStatus(context.Context, *UpdateMonitoringStatusRequest) (*EmptyResponse, error)
	// ListPlatformManagements List all platform managements for agent
	ListPlatformManagements(context.Context, *EmptyRequest) (*ListPlatformManagementsResponse, error)
	mustEmbedUnimplementedServiceAPIServer()
}

// UnimplementedServiceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAPIServer struct {
}

func (UnimplementedServiceAPIServer) GetMetadata(context.Context, *MetadataRequest) (*Metadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedServiceAPIServer) GetMetadataPassword(context.Context, *MetadataRequest) (*MetadataPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadataPassword not implemented")
}
func (UnimplementedServiceAPIServer) GetNetworkBootData(context.Context, *NetworkBootDataRequest) (*NetworkBootDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkBootData not implemented")
}
func (UnimplementedServiceAPIServer) GetDHCPNetworks(context.Context, *DHCPNetworksRequest) (*DHCPNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDHCPNetworks not implemented")
}
func (UnimplementedServiceAPIServer) ListSwitches(context.Context, *EmptyRequest) (*ListSwitchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (UnimplementedServiceAPIServer) UpdateMacAddressMapping(context.Context, *UpdateMacAddressMappingRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMacAddressMapping not implemented")
}
func (UnimplementedServiceAPIServer) GetAutoRunScript(context.Context, *GetAutoRunScriptRequest) (*GetAutoRunScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoRunScript not implemented")
}
func (UnimplementedServiceAPIServer) PostProvisioningCallback(context.Context, *PostProvisioningCallbackRequest) (*PostProvisioningCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProvisioningCallback not implemented")
}
func (UnimplementedServiceAPIServer) FinishProvisioningCallback(context.Context, *FinishProvisioningCallbackRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishProvisioningCallback not implemented")
}
func (UnimplementedServiceAPIServer) PostDeprovisioningCallback(context.Context, *PostDeprovisioningCallbackRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDeprovisioningCallback not implemented")
}
func (UnimplementedServiceAPIServer) ListMonitoringTargets(context.Context, *EmptyRequest) (*ListMonitoringTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitoringTargets not implemented")
}
func (UnimplementedServiceAPIServer) UpdateMonitoringStatus(context.Context, *UpdateMonitoringStatusRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitoringStatus not implemented")
}
func (UnimplementedServiceAPIServer) ListPlatformManagements(context.Context, *EmptyRequest) (*ListPlatformManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformManagements not implemented")
}
func (UnimplementedServiceAPIServer) mustEmbedUnimplementedServiceAPIServer() {}

// UnsafeServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAPIServer will
// result in compilation errors.
type UnsafeServiceAPIServer interface {
	mustEmbedUnimplementedServiceAPIServer()
}

func RegisterServiceAPIServer(s grpc.ServiceRegistrar, srv ServiceAPIServer) {
	s.RegisterService(&ServiceAPI_ServiceDesc, srv)
}

func _ServiceAPI_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetMetadataPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetMetadataPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/GetMetadataPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetMetadataPassword(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetNetworkBootData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkBootDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetNetworkBootData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/GetNetworkBootData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetNetworkBootData(ctx, req.(*NetworkBootDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetDHCPNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetDHCPNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/GetDHCPNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetDHCPNetworks(ctx, req.(*DHCPNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListSwitches(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_UpdateMacAddressMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMacAddressMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).UpdateMacAddressMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/UpdateMacAddressMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).UpdateMacAddressMapping(ctx, req.(*UpdateMacAddressMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetAutoRunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoRunScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetAutoRunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/GetAutoRunScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetAutoRunScript(ctx, req.(*GetAutoRunScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_PostProvisioningCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProvisioningCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).PostProvisioningCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/PostProvisioningCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).PostProvisioningCallback(ctx, req.(*PostProvisioningCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_FinishProvisioningCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishProvisioningCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).FinishProvisioningCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/FinishProvisioningCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).FinishProvisioningCallback(ctx, req.(*FinishProvisioningCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_PostDeprovisioningCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeprovisioningCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).PostDeprovisioningCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/PostDeprovisioningCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).PostDeprovisioningCallback(ctx, req.(*PostDeprovisioningCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListMonitoringTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListMonitoringTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/ListMonitoringTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListMonitoringTargets(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_UpdateMonitoringStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitoringStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).UpdateMonitoringStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/UpdateMonitoringStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).UpdateMonitoringStatus(ctx, req.(*UpdateMonitoringStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListPlatformManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListPlatformManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceAPI/ListPlatformManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListPlatformManagements(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAPI_ServiceDesc is the grpc.ServiceDesc for ServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _ServiceAPI_GetMetadata_Handler,
		},
		{
			MethodName: "GetMetadataPassword",
			Handler:    _ServiceAPI_GetMetadataPassword_Handler,
		},
		{
			MethodName: "GetNetworkBootData",
			Handler:    _ServiceAPI_GetNetworkBootData_Handler,
		},
		{
			MethodName: "GetDHCPNetworks",
			Handler:    _ServiceAPI_GetDHCPNetworks_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _ServiceAPI_ListSwitches_Handler,
		},
		{
			MethodName: "UpdateMacAddressMapping",
			Handler:    _ServiceAPI_UpdateMacAddressMapping_Handler,
		},
		{
			MethodName: "GetAutoRunScript",
			Handler:    _ServiceAPI_GetAutoRunScript_Handler,
		},
		{
			MethodName: "PostProvisioningCallback",
			Handler:    _ServiceAPI_PostProvisioningCallback_Handler,
		},
		{
			MethodName: "FinishProvisioningCallback",
			Handler:    _ServiceAPI_FinishProvisioningCallback_Handler,
		},
		{
			MethodName: "PostDeprovisioningCallback",
			Handler:    _ServiceAPI_PostDeprovisioningCallback_Handler,
		},
		{
			MethodName: "ListMonitoringTargets",
			Handler:    _ServiceAPI_ListMonitoringTargets_Handler,
		},
		{
			MethodName: "UpdateMonitoringStatus",
			Handler:    _ServiceAPI_UpdateMonitoringStatus_Handler,
		},
		{
			MethodName: "ListPlatformManagements",
			Handler:    _ServiceAPI_ListPlatformManagements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
