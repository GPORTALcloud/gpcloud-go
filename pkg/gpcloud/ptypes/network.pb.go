// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: ptypes/network.proto

package ptypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkType int32

const (
	// For IPMI, ilo4, iDRAC, ...
	NetworkType_MANAGEMENT NetworkType = 0
	// Provisioning pool
	NetworkType_PROVISIONING_POOL NetworkType = 1
	// Public IP pool
	NetworkType_PUBLIC_POOL NetworkType = 2
	// Custom project public network
	NetworkType_PROJECT_PUBLIC NetworkType = 3
	// Custom project private network
	NetworkType_PROJECT_PRIVATE NetworkType = 4
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0: "MANAGEMENT",
		1: "PROVISIONING_POOL",
		2: "PUBLIC_POOL",
		3: "PROJECT_PUBLIC",
		4: "PROJECT_PRIVATE",
	}
	NetworkType_value = map[string]int32{
		"MANAGEMENT":        0,
		"PROVISIONING_POOL": 1,
		"PUBLIC_POOL":       2,
		"PROJECT_PUBLIC":    3,
		"PROJECT_PRIVATE":   4,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_ptypes_network_proto_enumTypes[0].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_ptypes_network_proto_enumTypes[0]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{0}
}

type SwitchType int32

const (
	SwitchType_Juniper       SwitchType = 0
	SwitchType_JuniperLegacy SwitchType = 1
)

// Enum value maps for SwitchType.
var (
	SwitchType_name = map[int32]string{
		0: "Juniper",
		1: "JuniperLegacy",
	}
	SwitchType_value = map[string]int32{
		"Juniper":       0,
		"JuniperLegacy": 1,
	}
)

func (x SwitchType) Enum() *SwitchType {
	p := new(SwitchType)
	*p = x
	return p
}

func (x SwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_ptypes_network_proto_enumTypes[1].Descriptor()
}

func (SwitchType) Type() protoreflect.EnumType {
	return &file_ptypes_network_proto_enumTypes[1]
}

func (x SwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchType.Descriptor instead.
func (SwitchType) EnumDescriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{1}
}

type ServerInterfaceType int32

const (
	ServerInterfaceType_PLATFORM_MANAGEMENT ServerInterfaceType = 0
	ServerInterfaceType_NETWORK             ServerInterfaceType = 1
)

// Enum value maps for ServerInterfaceType.
var (
	ServerInterfaceType_name = map[int32]string{
		0: "PLATFORM_MANAGEMENT",
		1: "NETWORK",
	}
	ServerInterfaceType_value = map[string]int32{
		"PLATFORM_MANAGEMENT": 0,
		"NETWORK":             1,
	}
)

func (x ServerInterfaceType) Enum() *ServerInterfaceType {
	p := new(ServerInterfaceType)
	*p = x
	return p
}

func (x ServerInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ptypes_network_proto_enumTypes[2].Descriptor()
}

func (ServerInterfaceType) Type() protoreflect.EnumType {
	return &file_ptypes_network_proto_enumTypes[2]
}

func (x ServerInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerInterfaceType.Descriptor instead.
func (ServerInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{2}
}

type Cidr_Version int32

const (
	Cidr_IPV4 Cidr_Version = 0
	Cidr_IPV6 Cidr_Version = 1
)

// Enum value maps for Cidr_Version.
var (
	Cidr_Version_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	Cidr_Version_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x Cidr_Version) Enum() *Cidr_Version {
	p := new(Cidr_Version)
	*p = x
	return p
}

func (x Cidr_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cidr_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_ptypes_network_proto_enumTypes[3].Descriptor()
}

func (Cidr_Version) Type() protoreflect.EnumType {
	return &file_ptypes_network_proto_enumTypes[3]
}

func (x Cidr_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cidr_Version.Descriptor instead.
func (Cidr_Version) EnumDescriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{5, 0}
}

type Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NetboxLink       string                 `protobuf:"bytes,3,opt,name=netbox_link,json=netboxLink,proto3" json:"netbox_link,omitempty"`
	Type             SwitchType             `protobuf:"varint,4,opt,name=type,proto3,enum=api.network.SwitchType" json:"type,omitempty"`
	Datacenter       *DataCenter            `protobuf:"bytes,5,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	Ip               string                 `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Username         string                 `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	Password         string                 `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	ServerInterfaces []*ServerInterface     `protobuf:"bytes,9,rep,name=server_interfaces,json=serverInterfaces,proto3" json:"server_interfaces,omitempty"`
	UplinkPorts      []string               `protobuf:"bytes,10,rep,name=uplink_ports,json=uplinkPorts,proto3" json:"uplink_ports,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastArpSync      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_arp_sync,json=lastArpSync,proto3" json:"last_arp_sync,omitempty"`
}

func (x *Switch) Reset() {
	*x = Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switch) ProtoMessage() {}

func (x *Switch) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switch.ProtoReflect.Descriptor instead.
func (*Switch) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{0}
}

func (x *Switch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Switch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Switch) GetNetboxLink() string {
	if x != nil {
		return x.NetboxLink
	}
	return ""
}

func (x *Switch) GetType() SwitchType {
	if x != nil {
		return x.Type
	}
	return SwitchType_Juniper
}

func (x *Switch) GetDatacenter() *DataCenter {
	if x != nil {
		return x.Datacenter
	}
	return nil
}

func (x *Switch) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Switch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Switch) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Switch) GetServerInterfaces() []*ServerInterface {
	if x != nil {
		return x.ServerInterfaces
	}
	return nil
}

func (x *Switch) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

func (x *Switch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Switch) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Switch) GetLastArpSync() *timestamppb.Timestamp {
	if x != nil {
		return x.LastArpSync
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type NetworkType `protobuf:"varint,3,opt,name=type,proto3,enum=api.network.NetworkType" json:"type,omitempty"`
	// Optional project
	Project       *BasicProject `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	Subnets       []*Subnet     `protobuf:"bytes,5,rep,name=subnets,proto3" json:"subnets,omitempty"`
	VlanId        int32         `protobuf:"varint,6,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Datacenter    *DataCenter   `protobuf:"bytes,7,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	PoolSize      int64         `protobuf:"varint,8,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	PoolAvailable int64         `protobuf:"varint,9,opt,name=pool_available,json=poolAvailable,proto3" json:"pool_available,omitempty"`
	// Timestamps
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{1}
}

func (x *Network) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetType() NetworkType {
	if x != nil {
		return x.Type
	}
	return NetworkType_MANAGEMENT
}

func (x *Network) GetProject() *BasicProject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Network) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *Network) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *Network) GetDatacenter() *DataCenter {
	if x != nil {
		return x.Datacenter
	}
	return nil
}

func (x *Network) GetPoolSize() int64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Network) GetPoolAvailable() int64 {
	if x != nil {
		return x.PoolAvailable
	}
	return 0
}

func (x *Network) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Network) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Network       *Network `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Cidr          *Cidr    `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	GatewayIp     *Cidr    `protobuf:"bytes,4,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	Dhcp          bool     `protobuf:"varint,5,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	PoolStart     *Cidr    `protobuf:"bytes,6,opt,name=pool_start,json=poolStart,proto3" json:"pool_start,omitempty"`
	PoolEnd       *Cidr    `protobuf:"bytes,7,opt,name=pool_end,json=poolEnd,proto3" json:"pool_end,omitempty"`
	PoolSize      int64    `protobuf:"varint,8,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
	PoolAvailable int64    `protobuf:"varint,9,opt,name=pool_available,json=poolAvailable,proto3" json:"pool_available,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{2}
}

func (x *Subnet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Subnet) GetCidr() *Cidr {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *Subnet) GetGatewayIp() *Cidr {
	if x != nil {
		return x.GatewayIp
	}
	return nil
}

func (x *Subnet) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

func (x *Subnet) GetPoolStart() *Cidr {
	if x != nil {
		return x.PoolStart
	}
	return nil
}

func (x *Subnet) GetPoolEnd() *Cidr {
	if x != nil {
		return x.PoolEnd
	}
	return nil
}

func (x *Subnet) GetPoolSize() int64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *Subnet) GetPoolAvailable() int64 {
	if x != nil {
		return x.PoolAvailable
	}
	return 0
}

type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Cidr   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Subnet  *Subnet `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Primary bool    `protobuf:"varint,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Online  bool    `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{3}
}

func (x *IPAddress) GetAddress() *Cidr {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *IPAddress) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *IPAddress) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *IPAddress) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

type ServerInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ServerInterface UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Interface type
	Type       ServerInterfaceType `protobuf:"varint,2,opt,name=type,proto3,enum=api.network.ServerInterfaceType" json:"type,omitempty"`
	MacAddress string              `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Driver     string              `protobuf:"bytes,4,opt,name=driver,proto3" json:"driver,omitempty"`
	// Speed in bit/s
	Speed int32 `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	// IP addresses
	Ips []*IPAddress `protobuf:"bytes,6,rep,name=ips,proto3" json:"ips,omitempty"`
	// Server ID
	ServerId string `protobuf:"bytes,7,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// Switch
	Switch     *Switch `protobuf:"bytes,8,opt,name=switch,proto3" json:"switch,omitempty"`
	SwitchPort string  `protobuf:"bytes,9,opt,name=switch_port,json=switchPort,proto3" json:"switch_port,omitempty"`
	// ServerInterface timestamps
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ServerInterface) Reset() {
	*x = ServerInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInterface) ProtoMessage() {}

func (x *ServerInterface) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInterface.ProtoReflect.Descriptor instead.
func (*ServerInterface) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{4}
}

func (x *ServerInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerInterface) GetType() ServerInterfaceType {
	if x != nil {
		return x.Type
	}
	return ServerInterfaceType_PLATFORM_MANAGEMENT
}

func (x *ServerInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ServerInterface) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *ServerInterface) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *ServerInterface) GetIps() []*IPAddress {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *ServerInterface) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerInterface) GetSwitch() *Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *ServerInterface) GetSwitchPort() string {
	if x != nil {
		return x.SwitchPort
	}
	return ""
}

func (x *ServerInterface) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ServerInterface) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Cidr This contains the IP version and IP inclusive prefix.
type Cidr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion Cidr_Version `protobuf:"varint,1,opt,name=ip_version,json=ipVersion,proto3,enum=api.network.Cidr_Version" json:"ip_version,omitempty"`
	Cidr      string       `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
}

func (x *Cidr) Reset() {
	*x = Cidr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cidr) ProtoMessage() {}

func (x *Cidr) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cidr.ProtoReflect.Descriptor instead.
func (*Cidr) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{5}
}

func (x *Cidr) GetIpVersion() Cidr_Version {
	if x != nil {
		return x.IpVersion
	}
	return Cidr_IPV4
}

func (x *Cidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

type MacIPMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Ip         string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *MacIPMapping) Reset() {
	*x = MacIPMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacIPMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacIPMapping) ProtoMessage() {}

func (x *MacIPMapping) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacIPMapping.ProtoReflect.Descriptor instead.
func (*MacIPMapping) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{6}
}

func (x *MacIPMapping) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *MacIPMapping) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type AdminListSwitchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switches []*Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
}

func (x *AdminListSwitchesResponse) Reset() {
	*x = AdminListSwitchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListSwitchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListSwitchesResponse) ProtoMessage() {}

func (x *AdminListSwitchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListSwitchesResponse.ProtoReflect.Descriptor instead.
func (*AdminListSwitchesResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{7}
}

func (x *AdminListSwitchesResponse) GetSwitches() []*Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

type AdminGetSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminGetSwitchRequest) Reset() {
	*x = AdminGetSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetSwitchRequest) ProtoMessage() {}

func (x *AdminGetSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetSwitchRequest.ProtoReflect.Descriptor instead.
func (*AdminGetSwitchRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{8}
}

func (x *AdminGetSwitchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminDeleteSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminDeleteSwitchRequest) Reset() {
	*x = AdminDeleteSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteSwitchRequest) ProtoMessage() {}

func (x *AdminDeleteSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteSwitchRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteSwitchRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{9}
}

func (x *AdminDeleteSwitchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminCreateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         SwitchType `protobuf:"varint,2,opt,name=type,proto3,enum=api.network.SwitchType" json:"type,omitempty"`
	DatacenterId string     `protobuf:"bytes,3,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	Ip           string     `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Username     string     `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password     string     `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	UplinkPorts  []string   `protobuf:"bytes,7,rep,name=uplink_ports,json=uplinkPorts,proto3" json:"uplink_ports,omitempty"`
}

func (x *AdminCreateSwitchRequest) Reset() {
	*x = AdminCreateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateSwitchRequest) ProtoMessage() {}

func (x *AdminCreateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateSwitchRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{10}
}

func (x *AdminCreateSwitchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateSwitchRequest) GetType() SwitchType {
	if x != nil {
		return x.Type
	}
	return SwitchType_Juniper
}

func (x *AdminCreateSwitchRequest) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *AdminCreateSwitchRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AdminCreateSwitchRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminCreateSwitchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AdminCreateSwitchRequest) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

type AdminUpdateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username    string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password    string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	UplinkPorts []string `protobuf:"bytes,4,rep,name=uplink_ports,json=uplinkPorts,proto3" json:"uplink_ports,omitempty"`
}

func (x *AdminUpdateSwitchRequest) Reset() {
	*x = AdminUpdateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateSwitchRequest) ProtoMessage() {}

func (x *AdminUpdateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateSwitchRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{11}
}

func (x *AdminUpdateSwitchRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminUpdateSwitchRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AdminUpdateSwitchRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AdminUpdateSwitchRequest) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

type ListSwitchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switches []*Switch `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
}

func (x *ListSwitchesResponse) Reset() {
	*x = ListSwitchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSwitchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchesResponse) ProtoMessage() {}

func (x *ListSwitchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchesResponse.ProtoReflect.Descriptor instead.
func (*ListSwitchesResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{12}
}

func (x *ListSwitchesResponse) GetSwitches() []*Switch {
	if x != nil {
		return x.Switches
	}
	return nil
}

type MacAddressMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddresses []string `protobuf:"bytes,1,rep,name=mac_addresses,json=macAddresses,proto3" json:"mac_addresses,omitempty"`
	SwitchId     string   `protobuf:"bytes,2,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	SwitchPort   string   `protobuf:"bytes,3,opt,name=switch_port,json=switchPort,proto3" json:"switch_port,omitempty"`
}

func (x *MacAddressMapping) Reset() {
	*x = MacAddressMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacAddressMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacAddressMapping) ProtoMessage() {}

func (x *MacAddressMapping) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacAddressMapping.ProtoReflect.Descriptor instead.
func (*MacAddressMapping) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{13}
}

func (x *MacAddressMapping) GetMacAddresses() []string {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

func (x *MacAddressMapping) GetSwitchId() string {
	if x != nil {
		return x.SwitchId
	}
	return ""
}

func (x *MacAddressMapping) GetSwitchPort() string {
	if x != nil {
		return x.SwitchPort
	}
	return ""
}

type UpdateMacAddressMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping []*MacAddressMapping `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *UpdateMacAddressMappingRequest) Reset() {
	*x = UpdateMacAddressMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMacAddressMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMacAddressMappingRequest) ProtoMessage() {}

func (x *UpdateMacAddressMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMacAddressMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateMacAddressMappingRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateMacAddressMappingRequest) GetMapping() []*MacAddressMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type ConfigureSwitchPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch         *Switch `protobuf:"bytes,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SwitchPort     string  `protobuf:"bytes,2,opt,name=switch_port,json=switchPort,proto3" json:"switch_port,omitempty"`
	Comment        string  `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	UntaggedVlanId int32   `protobuf:"varint,4,opt,name=untagged_vlan_id,json=untaggedVlanId,proto3" json:"untagged_vlan_id,omitempty"`
	TaggedVlanIds  []int32 `protobuf:"varint,5,rep,packed,name=tagged_vlan_ids,json=taggedVlanIds,proto3" json:"tagged_vlan_ids,omitempty"`
}

func (x *ConfigureSwitchPortRequest) Reset() {
	*x = ConfigureSwitchPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureSwitchPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureSwitchPortRequest) ProtoMessage() {}

func (x *ConfigureSwitchPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureSwitchPortRequest.ProtoReflect.Descriptor instead.
func (*ConfigureSwitchPortRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigureSwitchPortRequest) GetSwitch() *Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

func (x *ConfigureSwitchPortRequest) GetSwitchPort() string {
	if x != nil {
		return x.SwitchPort
	}
	return ""
}

func (x *ConfigureSwitchPortRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ConfigureSwitchPortRequest) GetUntaggedVlanId() int32 {
	if x != nil {
		return x.UntaggedVlanId
	}
	return 0
}

func (x *ConfigureSwitchPortRequest) GetTaggedVlanIds() []int32 {
	if x != nil {
		return x.TaggedVlanIds
	}
	return nil
}

type AdminListNetworksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *AdminListNetworksResponse) Reset() {
	*x = AdminListNetworksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListNetworksResponse) ProtoMessage() {}

func (x *AdminListNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListNetworksResponse.ProtoReflect.Descriptor instead.
func (*AdminListNetworksResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{16}
}

func (x *AdminListNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type AdminCreateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         NetworkType `protobuf:"varint,2,opt,name=type,proto3,enum=api.network.NetworkType" json:"type,omitempty"`
	DatacenterId string      `protobuf:"bytes,3,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	VlanId       int32       `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *AdminCreateNetworkRequest) Reset() {
	*x = AdminCreateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateNetworkRequest) ProtoMessage() {}

func (x *AdminCreateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateNetworkRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{17}
}

func (x *AdminCreateNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateNetworkRequest) GetType() NetworkType {
	if x != nil {
		return x.Type
	}
	return NetworkType_MANAGEMENT
}

func (x *AdminCreateNetworkRequest) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *AdminCreateNetworkRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type AdminUpdateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VlanId int32  `protobuf:"varint,3,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *AdminUpdateNetworkRequest) Reset() {
	*x = AdminUpdateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateNetworkRequest) ProtoMessage() {}

func (x *AdminUpdateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateNetworkRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{18}
}

func (x *AdminUpdateNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminUpdateNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminUpdateNetworkRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type AdminCreateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Cidr      string `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	PoolStart string `protobuf:"bytes,3,opt,name=pool_start,json=poolStart,proto3" json:"pool_start,omitempty"`
	PoolEnd   string `protobuf:"bytes,4,opt,name=pool_end,json=poolEnd,proto3" json:"pool_end,omitempty"`
	Gateway   string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dhcp      bool   `protobuf:"varint,6,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
}

func (x *AdminCreateSubnetRequest) Reset() {
	*x = AdminCreateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateSubnetRequest) ProtoMessage() {}

func (x *AdminCreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{19}
}

func (x *AdminCreateSubnetRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *AdminCreateSubnetRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *AdminCreateSubnetRequest) GetPoolStart() string {
	if x != nil {
		return x.PoolStart
	}
	return ""
}

func (x *AdminCreateSubnetRequest) GetPoolEnd() string {
	if x != nil {
		return x.PoolEnd
	}
	return ""
}

func (x *AdminCreateSubnetRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AdminCreateSubnetRequest) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

type AdminUpdateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cidr      string `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	PoolStart string `protobuf:"bytes,3,opt,name=pool_start,json=poolStart,proto3" json:"pool_start,omitempty"`
	PoolEnd   string `protobuf:"bytes,4,opt,name=pool_end,json=poolEnd,proto3" json:"pool_end,omitempty"`
	Gateway   string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dhcp      bool   `protobuf:"varint,6,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
}

func (x *AdminUpdateSubnetRequest) Reset() {
	*x = AdminUpdateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateSubnetRequest) ProtoMessage() {}

func (x *AdminUpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{20}
}

func (x *AdminUpdateSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminUpdateSubnetRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *AdminUpdateSubnetRequest) GetPoolStart() string {
	if x != nil {
		return x.PoolStart
	}
	return ""
}

func (x *AdminUpdateSubnetRequest) GetPoolEnd() string {
	if x != nil {
		return x.PoolEnd
	}
	return ""
}

func (x *AdminUpdateSubnetRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *AdminUpdateSubnetRequest) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

type AdminDeleteSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminDeleteSubnetRequest) Reset() {
	*x = AdminDeleteSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteSubnetRequest) ProtoMessage() {}

func (x *AdminDeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{21}
}

func (x *AdminDeleteSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminDeleteNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminDeleteNetworkRequest) Reset() {
	*x = AdminDeleteNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteNetworkRequest) ProtoMessage() {}

func (x *AdminDeleteNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteNetworkRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{22}
}

func (x *AdminDeleteNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminGetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminGetNetworkRequest) Reset() {
	*x = AdminGetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetNetworkRequest) ProtoMessage() {}

func (x *AdminGetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetNetworkRequest.ProtoReflect.Descriptor instead.
func (*AdminGetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{23}
}

func (x *AdminGetNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AdminListVlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId string `protobuf:"bytes,1,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
}

func (x *AdminListVlansRequest) Reset() {
	*x = AdminListVlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListVlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListVlansRequest) ProtoMessage() {}

func (x *AdminListVlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListVlansRequest.ProtoReflect.Descriptor instead.
func (*AdminListVlansRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{24}
}

func (x *AdminListVlansRequest) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

type AdminCreateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId string `protobuf:"bytes,1,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	VlanId       int32  `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *AdminCreateVlanRequest) Reset() {
	*x = AdminCreateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateVlanRequest) ProtoMessage() {}

func (x *AdminCreateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateVlanRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateVlanRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{25}
}

func (x *AdminCreateVlanRequest) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *AdminCreateVlanRequest) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type VLAN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VlanId    int32  `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Available bool   `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *VLAN) Reset() {
	*x = VLAN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VLAN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VLAN) ProtoMessage() {}

func (x *VLAN) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VLAN.ProtoReflect.Descriptor instead.
func (*VLAN) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{26}
}

func (x *VLAN) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VLAN) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VLAN) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type AdminListVlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vlans []*VLAN `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
}

func (x *AdminListVlansResponse) Reset() {
	*x = AdminListVlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListVlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListVlansResponse) ProtoMessage() {}

func (x *AdminListVlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListVlansResponse.ProtoReflect.Descriptor instead.
func (*AdminListVlansResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{27}
}

func (x *AdminListVlansResponse) GetVlans() []*VLAN {
	if x != nil {
		return x.Vlans
	}
	return nil
}

type AdminDeleteVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminDeleteVlanRequest) Reset() {
	*x = AdminDeleteVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteVlanRequest) ProtoMessage() {}

func (x *AdminDeleteVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteVlanRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteVlanRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{28}
}

func (x *AdminDeleteVlanRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListProjectNetworksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ListProjectNetworksRequest) Reset() {
	*x = ListProjectNetworksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectNetworksRequest) ProtoMessage() {}

func (x *ListProjectNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectNetworksRequest.ProtoReflect.Descriptor instead.
func (*ListProjectNetworksRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{29}
}

func (x *ListProjectNetworksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectNetworksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *ListProjectNetworksResponse) Reset() {
	*x = ListProjectNetworksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectNetworksResponse) ProtoMessage() {}

func (x *ListProjectNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectNetworksResponse.ProtoReflect.Descriptor instead.
func (*ListProjectNetworksResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{30}
}

func (x *ListProjectNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type GetProjectNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProjectNetworkRequest) Reset() {
	*x = GetProjectNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectNetworkRequest) ProtoMessage() {}

func (x *GetProjectNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetProjectNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{31}
}

func (x *GetProjectNetworkRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateProjectNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateProjectNetworkRequest) Reset() {
	*x = UpdateProjectNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectNetworkRequest) ProtoMessage() {}

func (x *UpdateProjectNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectNetworkRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateProjectNetworkRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectNetworkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProjectNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateProjectNetworkSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Cidr      string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	PoolStart string `protobuf:"bytes,4,opt,name=pool_start,json=poolStart,proto3" json:"pool_start,omitempty"`
	PoolEnd   string `protobuf:"bytes,5,opt,name=pool_end,json=poolEnd,proto3" json:"pool_end,omitempty"`
}

func (x *CreateProjectNetworkSubnetRequest) Reset() {
	*x = CreateProjectNetworkSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectNetworkSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectNetworkSubnetRequest) ProtoMessage() {}

func (x *CreateProjectNetworkSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectNetworkSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectNetworkSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{33}
}

func (x *CreateProjectNetworkSubnetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateProjectNetworkSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateProjectNetworkSubnetRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *CreateProjectNetworkSubnetRequest) GetPoolStart() string {
	if x != nil {
		return x.PoolStart
	}
	return ""
}

func (x *CreateProjectNetworkSubnetRequest) GetPoolEnd() string {
	if x != nil {
		return x.PoolEnd
	}
	return ""
}

type UpdateProjectNetworkSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Cidr      string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	PoolStart string `protobuf:"bytes,4,opt,name=pool_start,json=poolStart,proto3" json:"pool_start,omitempty"`
	PoolEnd   string `protobuf:"bytes,5,opt,name=pool_end,json=poolEnd,proto3" json:"pool_end,omitempty"`
}

func (x *UpdateProjectNetworkSubnetRequest) Reset() {
	*x = UpdateProjectNetworkSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectNetworkSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectNetworkSubnetRequest) ProtoMessage() {}

func (x *UpdateProjectNetworkSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectNetworkSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectNetworkSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateProjectNetworkSubnetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectNetworkSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProjectNetworkSubnetRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *UpdateProjectNetworkSubnetRequest) GetPoolStart() string {
	if x != nil {
		return x.PoolStart
	}
	return ""
}

func (x *UpdateProjectNetworkSubnetRequest) GetPoolEnd() string {
	if x != nil {
		return x.PoolEnd
	}
	return ""
}

type DeleteProjectNetworkSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProjectNetworkSubnetRequest) Reset() {
	*x = DeleteProjectNetworkSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectNetworkSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectNetworkSubnetRequest) ProtoMessage() {}

func (x *DeleteProjectNetworkSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectNetworkSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectNetworkSubnetRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteProjectNetworkSubnetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteProjectNetworkSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDHCPInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *GetDHCPInformationRequest) Reset() {
	*x = GetDHCPInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPInformationRequest) ProtoMessage() {}

func (x *GetDHCPInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPInformationRequest.ProtoReflect.Descriptor instead.
func (*GetDHCPInformationRequest) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{36}
}

func (x *GetDHCPInformationRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type GetDHCPInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  string   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Gateway    string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	DnsServers []string `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	NtpServers []string `protobuf:"bytes,4,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
	LeaseTtl   string   `protobuf:"bytes,5,opt,name=lease_ttl,json=leaseTtl,proto3" json:"lease_ttl,omitempty"`
	BootTftp   bool     `protobuf:"varint,6,opt,name=boot_tftp,json=bootTftp,proto3" json:"boot_tftp,omitempty"`
}

func (x *GetDHCPInformationResponse) Reset() {
	*x = GetDHCPInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ptypes_network_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDHCPInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDHCPInformationResponse) ProtoMessage() {}

func (x *GetDHCPInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ptypes_network_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDHCPInformationResponse.ProtoReflect.Descriptor instead.
func (*GetDHCPInformationResponse) Descriptor() ([]byte, []int) {
	return file_ptypes_network_proto_rawDescGZIP(), []int{37}
}

func (x *GetDHCPInformationResponse) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GetDHCPInformationResponse) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *GetDHCPInformationResponse) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *GetDHCPInformationResponse) GetNtpServers() []string {
	if x != nil {
		return x.NtpServers
	}
	return nil
}

func (x *GetDHCPInformationResponse) GetLeaseTtl() string {
	if x != nil {
		return x.LeaseTtl
	}
	return ""
}

func (x *GetDHCPInformationResponse) GetBootTftp() bool {
	if x != nil {
		return x.BootTftp
	}
	return false
}

var File_ptypes_network_proto protoreflect.FileDescriptor

var file_ptypes_network_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x04,
	0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x72, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x22, 0xc8,
	0x03, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x06, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x43, 0x69, 0x64, 0x72, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x69,
	0x64, 0x72, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x68, 0x63,
	0x70, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x43, 0x69, 0x64, 0x72, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0xb1, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x73, 0x0a, 0x04, 0x43, 0x69, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x43, 0x69,
	0x64, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x22, 0x1d, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x49,
	0x50, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4c, 0x0a, 0x19, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2a, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a,
	0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0x47, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x5a, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0xd6, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22,
	0xb5, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x68, 0x63, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70,
	0x22, 0x2a, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x19,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x56, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x04, 0x56, 0x4c, 0x41,
	0x4e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x41, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x56, 0x4c, 0x41, 0x4e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x28, 0x0a, 0x16, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x22, 0x52, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x48, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0xd1, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x44, 0x48, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x74, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x66, 0x74, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x66, 0x74, 0x70, 0x2a, 0x6e, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x04, 0x2a, 0x2c, 0x0a,
	0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4a,
	0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x75, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x13, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x42, 0x82, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x14, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x73, 0xa2, 0x02, 0x03, 0x41, 0x4e, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0xca, 0x02, 0x0b, 0x41, 0x70, 0x69, 0x5c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0xe2, 0x02, 0x17, 0x41, 0x70, 0x69, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ptypes_network_proto_rawDescOnce sync.Once
	file_ptypes_network_proto_rawDescData = file_ptypes_network_proto_rawDesc
)

func file_ptypes_network_proto_rawDescGZIP() []byte {
	file_ptypes_network_proto_rawDescOnce.Do(func() {
		file_ptypes_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_ptypes_network_proto_rawDescData)
	})
	return file_ptypes_network_proto_rawDescData
}

var file_ptypes_network_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ptypes_network_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_ptypes_network_proto_goTypes = []interface{}{
	(NetworkType)(0),                          // 0: api.network.NetworkType
	(SwitchType)(0),                           // 1: api.network.SwitchType
	(ServerInterfaceType)(0),                  // 2: api.network.ServerInterfaceType
	(Cidr_Version)(0),                         // 3: api.network.Cidr.Version
	(*Switch)(nil),                            // 4: api.network.Switch
	(*Network)(nil),                           // 5: api.network.Network
	(*Subnet)(nil),                            // 6: api.network.Subnet
	(*IPAddress)(nil),                         // 7: api.network.IPAddress
	(*ServerInterface)(nil),                   // 8: api.network.ServerInterface
	(*Cidr)(nil),                              // 9: api.network.Cidr
	(*MacIPMapping)(nil),                      // 10: api.network.MacIPMapping
	(*AdminListSwitchesResponse)(nil),         // 11: api.network.AdminListSwitchesResponse
	(*AdminGetSwitchRequest)(nil),             // 12: api.network.AdminGetSwitchRequest
	(*AdminDeleteSwitchRequest)(nil),          // 13: api.network.AdminDeleteSwitchRequest
	(*AdminCreateSwitchRequest)(nil),          // 14: api.network.AdminCreateSwitchRequest
	(*AdminUpdateSwitchRequest)(nil),          // 15: api.network.AdminUpdateSwitchRequest
	(*ListSwitchesResponse)(nil),              // 16: api.network.ListSwitchesResponse
	(*MacAddressMapping)(nil),                 // 17: api.network.MacAddressMapping
	(*UpdateMacAddressMappingRequest)(nil),    // 18: api.network.UpdateMacAddressMappingRequest
	(*ConfigureSwitchPortRequest)(nil),        // 19: api.network.ConfigureSwitchPortRequest
	(*AdminListNetworksResponse)(nil),         // 20: api.network.AdminListNetworksResponse
	(*AdminCreateNetworkRequest)(nil),         // 21: api.network.AdminCreateNetworkRequest
	(*AdminUpdateNetworkRequest)(nil),         // 22: api.network.AdminUpdateNetworkRequest
	(*AdminCreateSubnetRequest)(nil),          // 23: api.network.AdminCreateSubnetRequest
	(*AdminUpdateSubnetRequest)(nil),          // 24: api.network.AdminUpdateSubnetRequest
	(*AdminDeleteSubnetRequest)(nil),          // 25: api.network.AdminDeleteSubnetRequest
	(*AdminDeleteNetworkRequest)(nil),         // 26: api.network.AdminDeleteNetworkRequest
	(*AdminGetNetworkRequest)(nil),            // 27: api.network.AdminGetNetworkRequest
	(*AdminListVlansRequest)(nil),             // 28: api.network.AdminListVlansRequest
	(*AdminCreateVlanRequest)(nil),            // 29: api.network.AdminCreateVlanRequest
	(*VLAN)(nil),                              // 30: api.network.VLAN
	(*AdminListVlansResponse)(nil),            // 31: api.network.AdminListVlansResponse
	(*AdminDeleteVlanRequest)(nil),            // 32: api.network.AdminDeleteVlanRequest
	(*ListProjectNetworksRequest)(nil),        // 33: api.network.ListProjectNetworksRequest
	(*ListProjectNetworksResponse)(nil),       // 34: api.network.ListProjectNetworksResponse
	(*GetProjectNetworkRequest)(nil),          // 35: api.network.GetProjectNetworkRequest
	(*UpdateProjectNetworkRequest)(nil),       // 36: api.network.UpdateProjectNetworkRequest
	(*CreateProjectNetworkSubnetRequest)(nil), // 37: api.network.CreateProjectNetworkSubnetRequest
	(*UpdateProjectNetworkSubnetRequest)(nil), // 38: api.network.UpdateProjectNetworkSubnetRequest
	(*DeleteProjectNetworkSubnetRequest)(nil), // 39: api.network.DeleteProjectNetworkSubnetRequest
	(*GetDHCPInformationRequest)(nil),         // 40: api.network.GetDHCPInformationRequest
	(*GetDHCPInformationResponse)(nil),        // 41: api.network.GetDHCPInformationResponse
	(*DataCenter)(nil),                        // 42: api.region.DataCenter
	(*timestamppb.Timestamp)(nil),             // 43: google.protobuf.Timestamp
	(*BasicProject)(nil),                      // 44: api.basic.BasicProject
}
var file_ptypes_network_proto_depIdxs = []int32{
	1,  // 0: api.network.Switch.type:type_name -> api.network.SwitchType
	42, // 1: api.network.Switch.datacenter:type_name -> api.region.DataCenter
	8,  // 2: api.network.Switch.server_interfaces:type_name -> api.network.ServerInterface
	43, // 3: api.network.Switch.created_at:type_name -> google.protobuf.Timestamp
	43, // 4: api.network.Switch.updated_at:type_name -> google.protobuf.Timestamp
	43, // 5: api.network.Switch.last_arp_sync:type_name -> google.protobuf.Timestamp
	0,  // 6: api.network.Network.type:type_name -> api.network.NetworkType
	44, // 7: api.network.Network.project:type_name -> api.basic.BasicProject
	6,  // 8: api.network.Network.subnets:type_name -> api.network.Subnet
	42, // 9: api.network.Network.datacenter:type_name -> api.region.DataCenter
	43, // 10: api.network.Network.created_at:type_name -> google.protobuf.Timestamp
	43, // 11: api.network.Network.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 12: api.network.Subnet.network:type_name -> api.network.Network
	9,  // 13: api.network.Subnet.cidr:type_name -> api.network.Cidr
	9,  // 14: api.network.Subnet.gateway_ip:type_name -> api.network.Cidr
	9,  // 15: api.network.Subnet.pool_start:type_name -> api.network.Cidr
	9,  // 16: api.network.Subnet.pool_end:type_name -> api.network.Cidr
	9,  // 17: api.network.IPAddress.address:type_name -> api.network.Cidr
	6,  // 18: api.network.IPAddress.subnet:type_name -> api.network.Subnet
	2,  // 19: api.network.ServerInterface.type:type_name -> api.network.ServerInterfaceType
	7,  // 20: api.network.ServerInterface.ips:type_name -> api.network.IPAddress
	4,  // 21: api.network.ServerInterface.switch:type_name -> api.network.Switch
	43, // 22: api.network.ServerInterface.created_at:type_name -> google.protobuf.Timestamp
	43, // 23: api.network.ServerInterface.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 24: api.network.Cidr.ip_version:type_name -> api.network.Cidr.Version
	4,  // 25: api.network.AdminListSwitchesResponse.switches:type_name -> api.network.Switch
	1,  // 26: api.network.AdminCreateSwitchRequest.type:type_name -> api.network.SwitchType
	4,  // 27: api.network.ListSwitchesResponse.switches:type_name -> api.network.Switch
	17, // 28: api.network.UpdateMacAddressMappingRequest.mapping:type_name -> api.network.MacAddressMapping
	4,  // 29: api.network.ConfigureSwitchPortRequest.switch:type_name -> api.network.Switch
	5,  // 30: api.network.AdminListNetworksResponse.networks:type_name -> api.network.Network
	0,  // 31: api.network.AdminCreateNetworkRequest.type:type_name -> api.network.NetworkType
	30, // 32: api.network.AdminListVlansResponse.vlans:type_name -> api.network.VLAN
	5,  // 33: api.network.ListProjectNetworksResponse.networks:type_name -> api.network.Network
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_ptypes_network_proto_init() }
func file_ptypes_network_proto_init() {
	if File_ptypes_network_proto != nil {
		return
	}
	file_ptypes_region_proto_init()
	file_ptypes_basic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ptypes_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cidr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacIPMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListSwitchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSwitchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacAddressMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMacAddressMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureSwitchPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListNetworksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListVlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VLAN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListVlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectNetworksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectNetworksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectNetworkSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectNetworkSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectNetworkSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ptypes_network_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDHCPInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ptypes_network_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ptypes_network_proto_goTypes,
		DependencyIndexes: file_ptypes_network_proto_depIdxs,
		EnumInfos:         file_ptypes_network_proto_enumTypes,
		MessageInfos:      file_ptypes_network_proto_msgTypes,
	}.Build()
	File_ptypes_network_proto = out.File
	file_ptypes_network_proto_rawDesc = nil
	file_ptypes_network_proto_goTypes = nil
	file_ptypes_network_proto_depIdxs = nil
}
