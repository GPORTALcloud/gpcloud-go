// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ptypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkAgentServiceClient is the client API for NetworkAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAgentServiceClient interface {
	// RebootServer Reboots the server via Platform Management
	ConfigureSwitchPort(ctx context.Context, in *ConfigureSwitchPortRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// RebootServer Reboots the server via Platform Management
	RebootServer(ctx context.Context, in *RebootServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ShutOffServer Shutdowns the server via Platform Management
	ShutOffServer(ctx context.Context, in *ShutOffServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// UpdateDHCP Updates the DHCP server config and reloads it
	UpdateDHCP(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ConfigurePlatformManagement Configures the platform management
	ConfigurePlatformManagement(ctx context.Context, in *ConfigurePlatformManagementRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type networkAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAgentServiceClient(cc grpc.ClientConnInterface) NetworkAgentServiceClient {
	return &networkAgentServiceClient{cc}
}

func (c *networkAgentServiceClient) ConfigureSwitchPort(ctx context.Context, in *ConfigureSwitchPortRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.NetworkAgentService/ConfigureSwitchPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAgentServiceClient) RebootServer(ctx context.Context, in *RebootServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.NetworkAgentService/RebootServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAgentServiceClient) ShutOffServer(ctx context.Context, in *ShutOffServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.NetworkAgentService/ShutOffServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAgentServiceClient) UpdateDHCP(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.NetworkAgentService/UpdateDHCP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAgentServiceClient) ConfigurePlatformManagement(ctx context.Context, in *ConfigurePlatformManagementRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.NetworkAgentService/ConfigurePlatformManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAgentServiceServer is the server API for NetworkAgentService service.
// All implementations must embed UnimplementedNetworkAgentServiceServer
// for forward compatibility
type NetworkAgentServiceServer interface {
	// RebootServer Reboots the server via Platform Management
	ConfigureSwitchPort(context.Context, *ConfigureSwitchPortRequest) (*EmptyResponse, error)
	// RebootServer Reboots the server via Platform Management
	RebootServer(context.Context, *RebootServerRequest) (*EmptyResponse, error)
	// ShutOffServer Shutdowns the server via Platform Management
	ShutOffServer(context.Context, *ShutOffServerRequest) (*EmptyResponse, error)
	// UpdateDHCP Updates the DHCP server config and reloads it
	UpdateDHCP(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// ConfigurePlatformManagement Configures the platform management
	ConfigurePlatformManagement(context.Context, *ConfigurePlatformManagementRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedNetworkAgentServiceServer()
}

// UnimplementedNetworkAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkAgentServiceServer struct {
}

func (UnimplementedNetworkAgentServiceServer) ConfigureSwitchPort(context.Context, *ConfigureSwitchPortRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureSwitchPort not implemented")
}
func (UnimplementedNetworkAgentServiceServer) RebootServer(context.Context, *RebootServerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootServer not implemented")
}
func (UnimplementedNetworkAgentServiceServer) ShutOffServer(context.Context, *ShutOffServerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutOffServer not implemented")
}
func (UnimplementedNetworkAgentServiceServer) UpdateDHCP(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDHCP not implemented")
}
func (UnimplementedNetworkAgentServiceServer) ConfigurePlatformManagement(context.Context, *ConfigurePlatformManagementRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePlatformManagement not implemented")
}
func (UnimplementedNetworkAgentServiceServer) mustEmbedUnimplementedNetworkAgentServiceServer() {}

// UnsafeNetworkAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAgentServiceServer will
// result in compilation errors.
type UnsafeNetworkAgentServiceServer interface {
	mustEmbedUnimplementedNetworkAgentServiceServer()
}

func RegisterNetworkAgentServiceServer(s grpc.ServiceRegistrar, srv NetworkAgentServiceServer) {
	s.RegisterService(&NetworkAgentService_ServiceDesc, srv)
}

func _NetworkAgentService_ConfigureSwitchPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureSwitchPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAgentServiceServer).ConfigureSwitchPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkAgentService/ConfigureSwitchPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAgentServiceServer).ConfigureSwitchPort(ctx, req.(*ConfigureSwitchPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAgentService_RebootServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAgentServiceServer).RebootServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkAgentService/RebootServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAgentServiceServer).RebootServer(ctx, req.(*RebootServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAgentService_ShutOffServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutOffServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAgentServiceServer).ShutOffServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkAgentService/ShutOffServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAgentServiceServer).ShutOffServer(ctx, req.(*ShutOffServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAgentService_UpdateDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAgentServiceServer).UpdateDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkAgentService/UpdateDHCP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAgentServiceServer).UpdateDHCP(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAgentService_ConfigurePlatformManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurePlatformManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAgentServiceServer).ConfigurePlatformManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkAgentService/ConfigurePlatformManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAgentServiceServer).ConfigurePlatformManagement(ctx, req.(*ConfigurePlatformManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAgentService_ServiceDesc is the grpc.ServiceDesc for NetworkAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NetworkAgentService",
	HandlerType: (*NetworkAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureSwitchPort",
			Handler:    _NetworkAgentService_ConfigureSwitchPort_Handler,
		},
		{
			MethodName: "RebootServer",
			Handler:    _NetworkAgentService_RebootServer_Handler,
		},
		{
			MethodName: "ShutOffServer",
			Handler:    _NetworkAgentService_ShutOffServer_Handler,
		},
		{
			MethodName: "UpdateDHCP",
			Handler:    _NetworkAgentService_UpdateDHCP_Handler,
		},
		{
			MethodName: "ConfigurePlatformManagement",
			Handler:    _NetworkAgentService_ConfigurePlatformManagement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_service.proto",
}
