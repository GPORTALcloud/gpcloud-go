// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ptypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminAPIClient is the client API for AdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAPIClient interface {
	// ListServer Lists all server
	AdminListServer(ctx context.Context, in *AdminListServerRequest, opts ...grpc.CallOption) (*AdminListServerResponse, error)
	// GetServer Returns single server
	AdminGetServer(ctx context.Context, in *AdminGetServerRequest, opts ...grpc.CallOption) (*AdminServer, error)
	// GetServerLogs Returns all server logs
	AdminGetServerLogs(ctx context.Context, in *AdminGetServerLogsRequest, opts ...grpc.CallOption) (*AdminGetServerLogsResponse, error)
	// GetServerAlerts Returns all server alerts
	AdminGetServerAlerts(ctx context.Context, in *AdminGetServerAlertsRequest, opts ...grpc.CallOption) (*AdminGetServerAlertsResponse, error)
	// AdminDeleteServerAlert Returns all server alerts
	AdminDeleteServerAlert(ctx context.Context, in *AdminDeleteServerAlertRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Update a server and return it
	AdminUpdateServer(ctx context.Context, in *AdminUpdateServerRequest, opts ...grpc.CallOption) (*AdminServer, error)
	// Delete a server from the system
	AdminDeleteServer(ctx context.Context, in *AdminDeleteServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ChangeServerPowerStatus Change power status
	AdminChangeServerPowerStatus(ctx context.Context, in *AdminChangeServerPowerStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// AdminGetServerVNCToken Returns a VNC token for server
	AdminGetServerVNCToken(ctx context.Context, in *AdminGetServerVNCTokenRequest, opts ...grpc.CallOption) (*AdminGetServerVNCTokenResponse, error)
	// GetServerPlatformManagement Returns Platform Management data for server
	AdminGetServerPlatformManagement(ctx context.Context, in *AdminGetServerPlatformManagementRequest, opts ...grpc.CallOption) (*PlatformManagement, error)
	// Creates a new server job
	AdminCreateServerJob(ctx context.Context, in *AdminCreateServerJobRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all available server from our Netbox Inventory
	AdminListAvailableServer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListAvailableServerResponse, error)
	// Import servers from Netbox
	AdminImportServer(ctx context.Context, in *AdminImportServerRequest, opts ...grpc.CallOption) (*AdminImportServerResponse, error)
	// Create a new public image
	AdminCreateImage(ctx context.Context, in *AdminCreateImageRequest, opts ...grpc.CallOption) (*Image, error)
	// List all public images
	AdminListImages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListImagesResponse, error)
	// Return a single public image by ID
	AdminGetImage(ctx context.Context, in *AdminGetImageRequest, opts ...grpc.CallOption) (*Image, error)
	// Updates a public image
	AdminUpdateImage(ctx context.Context, in *AdminUpdateImageRequest, opts ...grpc.CallOption) (*Image, error)
	// Deletes a public image
	AdminDeleteImage(ctx context.Context, in *AdminDeleteImageRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// DeleteImageVersion Delete a project image version
	AdminDeleteImageVersion(ctx context.Context, in *AdminDeleteImageVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Lists all operating systems
	AdminListOperatingSystems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListOperatingSystemsResponse, error)
	// Delete a operating system
	AdminDeleteOperatingSystem(ctx context.Context, in *AdminDeleteOperatingSystemRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Creates a new operating system
	AdminCreateOperatingSystem(ctx context.Context, in *AdminCreateOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error)
	// Get a single operating system
	AdminGetOperatingSystem(ctx context.Context, in *AdminGetOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error)
	// Update a single operating system
	AdminUpdateOperatingSystem(ctx context.Context, in *AdminUpdateOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error)
	// List all existing flavours
	AdminListFlavours(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListFlavoursResponse, error)
	// Return a single flavour
	AdminGetFlavour(ctx context.Context, in *AdminGetFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error)
	// Delete a flavour
	AdminDeleteFlavour(ctx context.Context, in *AdminDeleteFlavourRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create a new flavour
	AdminCreateFlavour(ctx context.Context, in *AdminCreateFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error)
	// Update a existing flavour
	AdminUpdateFlavour(ctx context.Context, in *AdminUpdateFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error)
	// List all switches
	AdminListSwitches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListSwitchesResponse, error)
	// Get a single switch
	AdminGetSwitch(ctx context.Context, in *AdminGetSwitchRequest, opts ...grpc.CallOption) (*Switch, error)
	// Delete a switch
	AdminDeleteSwitch(ctx context.Context, in *AdminDeleteSwitchRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create a new switch
	AdminCreateSwitch(ctx context.Context, in *AdminCreateSwitchRequest, opts ...grpc.CallOption) (*Switch, error)
	// Update a existing switch
	AdminUpdateSwitch(ctx context.Context, in *AdminUpdateSwitchRequest, opts ...grpc.CallOption) (*Switch, error)
	// Returns a list with all agents
	AdminListAgents(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListAgentsResponse, error)
	// Creates a new agent
	AdminCreateAgent(ctx context.Context, in *AdminCreateAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	// Deletes a agent
	AdminDeleteAgent(ctx context.Context, in *AdminDeleteAgentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all available vouchers
	AdminListVouchers(ctx context.Context, in *AdminListVouchersRequest, opts ...grpc.CallOption) (*AdminListVouchersResponse, error)
	// Create new voucher(s)
	AdminCreateVouchers(ctx context.Context, in *AdminCreateVouchersRequest, opts ...grpc.CallOption) (*AdminCreateVouchersResponse, error)
	// Delete a specified voucher
	AdminDeleteVoucher(ctx context.Context, in *AdminDeleteVoucherRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all registered users
	AdminListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error)
	// Get user information
	AdminGetUser(ctx context.Context, in *AdminGetUserRequest, opts ...grpc.CallOption) (*AdminGetUserResponse, error)
	// UpdateUser
	AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	// Impersonate user
	AdminImpersonateUser(ctx context.Context, in *AdminImpersonateUserRequest, opts ...grpc.CallOption) (*AdminImpersonateUserResponse, error)
	// Get user bills
	AdminGetUserBills(ctx context.Context, in *AdminGetUserBillsRequest, opts ...grpc.CallOption) (*AdminGetUserBillsResponse, error)
	// Impersonate user
	AdminLockUser(ctx context.Context, in *AdminLockUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Impersonate user
	AdminUnlockUser(ctx context.Context, in *AdminUnlockUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Get project by ID
	AdminGetProject(ctx context.Context, in *AdminGetProjectRequest, opts ...grpc.CallOption) (*AdminGetProjectResponse, error)
	// Get project specific networks
	AdminGetProjectNetworks(ctx context.Context, in *AdminGetProjectNetworksRequest, opts ...grpc.CallOption) (*AdminGetProjectNetworksResponse, error)
	// Create a new project network
	AdminCreateProjectNetwork(ctx context.Context, in *AdminCreateProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Admin update project
	AdminUpdateProject(ctx context.Context, in *AdminUpdateProjectRequest, opts ...grpc.CallOption) (*AdminGetProjectResponse, error)
	// Get admin logs
	AdminGetAdminLogs(ctx context.Context, in *AdminGetAdminLogsRequest, opts ...grpc.CallOption) (*AdminGetAdminLogsResponse, error)
	// Create user remark
	AdminCreateUserRemark(ctx context.Context, in *AdminCreateUserRemarkRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Delete a user remark
	AdminDeleteUserRemark(ctx context.Context, in *AdminDeleteUserRemarkRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Get SPLA reporting
	AdminGetSplaReporting(ctx context.Context, in *AdminGetSplaReportingRequest, opts ...grpc.CallOption) (*AdminGetSplaReportingResponse, error)
	// Get IP history
	AdminGetIPHistory(ctx context.Context, in *AdminGetIPHistoryRequest, opts ...grpc.CallOption) (*AdminGetIPHistoryResponse, error)
	// Get bills
	AdminGetBills(ctx context.Context, in *AdminGetBillsRequest, opts ...grpc.CallOption) (*AdminGetBillsResponse, error)
	// Sent the bill to the customer again
	AdminResendBill(ctx context.Context, in *AdminResendBillRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Get bill details
	AdminGetBill(ctx context.Context, in *AdminGetBillRequest, opts ...grpc.CallOption) (*AdminGetBillResponse, error)
	// Download bill as pdf
	AdminGetBillPdf(ctx context.Context, in *AdminGetBillPdfRequest, opts ...grpc.CallOption) (*AdminGetBillPdfResponse, error)
	// Add payment to bill request
	AdminAddBillPayment(ctx context.Context, in *AdminAddBillPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Refund a specific bill payment
	AdminRefundBillPayment(ctx context.Context, in *AdminRefundBillPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Apply credit to a specific project
	AdminApplyCreditToProject(ctx context.Context, in *AdminApplyCreditToProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// List all regions with datacenters
	AdminListRegions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListRegionsResponse, error)
	// Return a specific region
	AdminGetRegion(ctx context.Context, in *AdminGetRegionRequest, opts ...grpc.CallOption) (*Region, error)
	// Create a new region
	AdminCreateRegion(ctx context.Context, in *AdminCreateRegionRequest, opts ...grpc.CallOption) (*Region, error)
	// Update a existing region
	AdminUpdateRegion(ctx context.Context, in *AdminUpdateRegionRequest, opts ...grpc.CallOption) (*Region, error)
	// Add a datacenter to a region
	AdminAddDatacenterToRegion(ctx context.Context, in *AdminAddDatacenterToRegionRequest, opts ...grpc.CallOption) (*DataCenter, error)
	// Update a datacenter
	AdminUpdateDatacenter(ctx context.Context, in *AdminUpdateDatacenterRequest, opts ...grpc.CallOption) (*DataCenter, error)
	// Delete a datacenter
	AdminDeleteDatacenter(ctx context.Context, in *AdminDeleteDatacenterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Delete a region
	AdminDeleteRegion(ctx context.Context, in *AdminDeleteRegionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Lists all networks
	AdminListNetworks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListNetworksResponse, error)
	// Create new network
	AdminCreateNetwork(ctx context.Context, in *AdminCreateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Delete a network
	AdminDeleteNetwork(ctx context.Context, in *AdminDeleteNetworkRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Get a single network
	AdminGetNetwork(ctx context.Context, in *AdminGetNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Updates a network
	AdminUpdateNetwork(ctx context.Context, in *AdminUpdateNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Delete a subnet
	AdminDeleteSubnet(ctx context.Context, in *AdminDeleteSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Create new subnet
	AdminCreateSubnet(ctx context.Context, in *AdminCreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// Updates a subnet
	AdminUpdateSubnet(ctx context.Context, in *AdminUpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// Get all VLANs for datacenter
	AdminListVlans(ctx context.Context, in *AdminListVlansRequest, opts ...grpc.CallOption) (*AdminListVlansResponse, error)
	// Create a VLAN for a datacenter
	AdminCreateVlan(ctx context.Context, in *AdminCreateVlanRequest, opts ...grpc.CallOption) (*VLAN, error)
	// Delete a single VLAN
	AdminDeleteVlan(ctx context.Context, in *AdminDeleteVlanRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Get monthly reporting
	AdminGetReporting(ctx context.Context, in *AdminGetReportingRequest, opts ...grpc.CallOption) (*AdminGetReportingResponse, error)
}

type adminAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAPIClient(cc grpc.ClientConnInterface) AdminAPIClient {
	return &adminAPIClient{cc}
}

func (c *adminAPIClient) AdminListServer(ctx context.Context, in *AdminListServerRequest, opts ...grpc.CallOption) (*AdminListServerResponse, error) {
	out := new(AdminListServerResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetServer(ctx context.Context, in *AdminGetServerRequest, opts ...grpc.CallOption) (*AdminServer, error) {
	out := new(AdminServer)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetServerLogs(ctx context.Context, in *AdminGetServerLogsRequest, opts ...grpc.CallOption) (*AdminGetServerLogsResponse, error) {
	out := new(AdminGetServerLogsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetServerLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetServerAlerts(ctx context.Context, in *AdminGetServerAlertsRequest, opts ...grpc.CallOption) (*AdminGetServerAlertsResponse, error) {
	out := new(AdminGetServerAlertsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetServerAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteServerAlert(ctx context.Context, in *AdminDeleteServerAlertRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteServerAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateServer(ctx context.Context, in *AdminUpdateServerRequest, opts ...grpc.CallOption) (*AdminServer, error) {
	out := new(AdminServer)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteServer(ctx context.Context, in *AdminDeleteServerRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminChangeServerPowerStatus(ctx context.Context, in *AdminChangeServerPowerStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminChangeServerPowerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetServerVNCToken(ctx context.Context, in *AdminGetServerVNCTokenRequest, opts ...grpc.CallOption) (*AdminGetServerVNCTokenResponse, error) {
	out := new(AdminGetServerVNCTokenResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetServerVNCToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetServerPlatformManagement(ctx context.Context, in *AdminGetServerPlatformManagementRequest, opts ...grpc.CallOption) (*PlatformManagement, error) {
	out := new(PlatformManagement)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetServerPlatformManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateServerJob(ctx context.Context, in *AdminCreateServerJobRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateServerJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListAvailableServer(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListAvailableServerResponse, error) {
	out := new(AdminListAvailableServerResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListAvailableServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminImportServer(ctx context.Context, in *AdminImportServerRequest, opts ...grpc.CallOption) (*AdminImportServerResponse, error) {
	out := new(AdminImportServerResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminImportServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateImage(ctx context.Context, in *AdminCreateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListImages(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListImagesResponse, error) {
	out := new(AdminListImagesResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetImage(ctx context.Context, in *AdminGetImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateImage(ctx context.Context, in *AdminUpdateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteImage(ctx context.Context, in *AdminDeleteImageRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteImageVersion(ctx context.Context, in *AdminDeleteImageVersionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteImageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListOperatingSystems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListOperatingSystemsResponse, error) {
	out := new(AdminListOperatingSystemsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListOperatingSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteOperatingSystem(ctx context.Context, in *AdminDeleteOperatingSystemRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateOperatingSystem(ctx context.Context, in *AdminCreateOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error) {
	out := new(OperatingSystem)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetOperatingSystem(ctx context.Context, in *AdminGetOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error) {
	out := new(OperatingSystem)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateOperatingSystem(ctx context.Context, in *AdminUpdateOperatingSystemRequest, opts ...grpc.CallOption) (*OperatingSystem, error) {
	out := new(OperatingSystem)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListFlavours(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListFlavoursResponse, error) {
	out := new(AdminListFlavoursResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListFlavours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetFlavour(ctx context.Context, in *AdminGetFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error) {
	out := new(AdminFlavour)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetFlavour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteFlavour(ctx context.Context, in *AdminDeleteFlavourRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteFlavour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateFlavour(ctx context.Context, in *AdminCreateFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error) {
	out := new(AdminFlavour)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateFlavour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateFlavour(ctx context.Context, in *AdminUpdateFlavourRequest, opts ...grpc.CallOption) (*AdminFlavour, error) {
	out := new(AdminFlavour)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateFlavour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListSwitches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListSwitchesResponse, error) {
	out := new(AdminListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetSwitch(ctx context.Context, in *AdminGetSwitchRequest, opts ...grpc.CallOption) (*Switch, error) {
	out := new(Switch)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteSwitch(ctx context.Context, in *AdminDeleteSwitchRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateSwitch(ctx context.Context, in *AdminCreateSwitchRequest, opts ...grpc.CallOption) (*Switch, error) {
	out := new(Switch)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateSwitch(ctx context.Context, in *AdminUpdateSwitchRequest, opts ...grpc.CallOption) (*Switch, error) {
	out := new(Switch)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListAgents(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListAgentsResponse, error) {
	out := new(AdminListAgentsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateAgent(ctx context.Context, in *AdminCreateAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteAgent(ctx context.Context, in *AdminDeleteAgentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListVouchers(ctx context.Context, in *AdminListVouchersRequest, opts ...grpc.CallOption) (*AdminListVouchersResponse, error) {
	out := new(AdminListVouchersResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateVouchers(ctx context.Context, in *AdminCreateVouchersRequest, opts ...grpc.CallOption) (*AdminCreateVouchersResponse, error) {
	out := new(AdminCreateVouchersResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateVouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteVoucher(ctx context.Context, in *AdminDeleteVoucherRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListUsers(ctx context.Context, in *AdminListUsersRequest, opts ...grpc.CallOption) (*AdminListUsersResponse, error) {
	out := new(AdminListUsersResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetUser(ctx context.Context, in *AdminGetUserRequest, opts ...grpc.CallOption) (*AdminGetUserResponse, error) {
	out := new(AdminGetUserResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateUser(ctx context.Context, in *AdminUpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminImpersonateUser(ctx context.Context, in *AdminImpersonateUserRequest, opts ...grpc.CallOption) (*AdminImpersonateUserResponse, error) {
	out := new(AdminImpersonateUserResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminImpersonateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetUserBills(ctx context.Context, in *AdminGetUserBillsRequest, opts ...grpc.CallOption) (*AdminGetUserBillsResponse, error) {
	out := new(AdminGetUserBillsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetUserBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminLockUser(ctx context.Context, in *AdminLockUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminLockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUnlockUser(ctx context.Context, in *AdminUnlockUserRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUnlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetProject(ctx context.Context, in *AdminGetProjectRequest, opts ...grpc.CallOption) (*AdminGetProjectResponse, error) {
	out := new(AdminGetProjectResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetProjectNetworks(ctx context.Context, in *AdminGetProjectNetworksRequest, opts ...grpc.CallOption) (*AdminGetProjectNetworksResponse, error) {
	out := new(AdminGetProjectNetworksResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetProjectNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateProjectNetwork(ctx context.Context, in *AdminCreateProjectNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateProjectNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateProject(ctx context.Context, in *AdminUpdateProjectRequest, opts ...grpc.CallOption) (*AdminGetProjectResponse, error) {
	out := new(AdminGetProjectResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetAdminLogs(ctx context.Context, in *AdminGetAdminLogsRequest, opts ...grpc.CallOption) (*AdminGetAdminLogsResponse, error) {
	out := new(AdminGetAdminLogsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetAdminLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateUserRemark(ctx context.Context, in *AdminCreateUserRemarkRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateUserRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteUserRemark(ctx context.Context, in *AdminDeleteUserRemarkRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteUserRemark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetSplaReporting(ctx context.Context, in *AdminGetSplaReportingRequest, opts ...grpc.CallOption) (*AdminGetSplaReportingResponse, error) {
	out := new(AdminGetSplaReportingResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetSplaReporting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetIPHistory(ctx context.Context, in *AdminGetIPHistoryRequest, opts ...grpc.CallOption) (*AdminGetIPHistoryResponse, error) {
	out := new(AdminGetIPHistoryResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetIPHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetBills(ctx context.Context, in *AdminGetBillsRequest, opts ...grpc.CallOption) (*AdminGetBillsResponse, error) {
	out := new(AdminGetBillsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminResendBill(ctx context.Context, in *AdminResendBillRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminResendBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetBill(ctx context.Context, in *AdminGetBillRequest, opts ...grpc.CallOption) (*AdminGetBillResponse, error) {
	out := new(AdminGetBillResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetBillPdf(ctx context.Context, in *AdminGetBillPdfRequest, opts ...grpc.CallOption) (*AdminGetBillPdfResponse, error) {
	out := new(AdminGetBillPdfResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetBillPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminAddBillPayment(ctx context.Context, in *AdminAddBillPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminAddBillPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminRefundBillPayment(ctx context.Context, in *AdminRefundBillPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminRefundBillPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminApplyCreditToProject(ctx context.Context, in *AdminApplyCreditToProjectRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminApplyCreditToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListRegions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListRegionsResponse, error) {
	out := new(AdminListRegionsResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetRegion(ctx context.Context, in *AdminGetRegionRequest, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateRegion(ctx context.Context, in *AdminCreateRegionRequest, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateRegion(ctx context.Context, in *AdminUpdateRegionRequest, opts ...grpc.CallOption) (*Region, error) {
	out := new(Region)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminAddDatacenterToRegion(ctx context.Context, in *AdminAddDatacenterToRegionRequest, opts ...grpc.CallOption) (*DataCenter, error) {
	out := new(DataCenter)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminAddDatacenterToRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateDatacenter(ctx context.Context, in *AdminUpdateDatacenterRequest, opts ...grpc.CallOption) (*DataCenter, error) {
	out := new(DataCenter)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateDatacenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteDatacenter(ctx context.Context, in *AdminDeleteDatacenterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteDatacenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteRegion(ctx context.Context, in *AdminDeleteRegionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListNetworks(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AdminListNetworksResponse, error) {
	out := new(AdminListNetworksResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateNetwork(ctx context.Context, in *AdminCreateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteNetwork(ctx context.Context, in *AdminDeleteNetworkRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetNetwork(ctx context.Context, in *AdminGetNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateNetwork(ctx context.Context, in *AdminUpdateNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteSubnet(ctx context.Context, in *AdminDeleteSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateSubnet(ctx context.Context, in *AdminCreateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminUpdateSubnet(ctx context.Context, in *AdminUpdateSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminUpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminListVlans(ctx context.Context, in *AdminListVlansRequest, opts ...grpc.CallOption) (*AdminListVlansResponse, error) {
	out := new(AdminListVlansResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminListVlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminCreateVlan(ctx context.Context, in *AdminCreateVlanRequest, opts ...grpc.CallOption) (*VLAN, error) {
	out := new(VLAN)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminCreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminDeleteVlan(ctx context.Context, in *AdminDeleteVlanRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminDeleteVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAPIClient) AdminGetReporting(ctx context.Context, in *AdminGetReportingRequest, opts ...grpc.CallOption) (*AdminGetReportingResponse, error) {
	out := new(AdminGetReportingResponse)
	err := c.cc.Invoke(ctx, "/api.AdminAPI/AdminGetReporting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAPIServer is the server API for AdminAPI service.
// All implementations must embed UnimplementedAdminAPIServer
// for forward compatibility
type AdminAPIServer interface {
	// ListServer Lists all server
	AdminListServer(context.Context, *AdminListServerRequest) (*AdminListServerResponse, error)
	// GetServer Returns single server
	AdminGetServer(context.Context, *AdminGetServerRequest) (*AdminServer, error)
	// GetServerLogs Returns all server logs
	AdminGetServerLogs(context.Context, *AdminGetServerLogsRequest) (*AdminGetServerLogsResponse, error)
	// GetServerAlerts Returns all server alerts
	AdminGetServerAlerts(context.Context, *AdminGetServerAlertsRequest) (*AdminGetServerAlertsResponse, error)
	// AdminDeleteServerAlert Returns all server alerts
	AdminDeleteServerAlert(context.Context, *AdminDeleteServerAlertRequest) (*EmptyResponse, error)
	// Update a server and return it
	AdminUpdateServer(context.Context, *AdminUpdateServerRequest) (*AdminServer, error)
	// Delete a server from the system
	AdminDeleteServer(context.Context, *AdminDeleteServerRequest) (*EmptyResponse, error)
	// ChangeServerPowerStatus Change power status
	AdminChangeServerPowerStatus(context.Context, *AdminChangeServerPowerStatusRequest) (*EmptyResponse, error)
	// AdminGetServerVNCToken Returns a VNC token for server
	AdminGetServerVNCToken(context.Context, *AdminGetServerVNCTokenRequest) (*AdminGetServerVNCTokenResponse, error)
	// GetServerPlatformManagement Returns Platform Management data for server
	AdminGetServerPlatformManagement(context.Context, *AdminGetServerPlatformManagementRequest) (*PlatformManagement, error)
	// Creates a new server job
	AdminCreateServerJob(context.Context, *AdminCreateServerJobRequest) (*EmptyResponse, error)
	// List all available server from our Netbox Inventory
	AdminListAvailableServer(context.Context, *EmptyRequest) (*AdminListAvailableServerResponse, error)
	// Import servers from Netbox
	AdminImportServer(context.Context, *AdminImportServerRequest) (*AdminImportServerResponse, error)
	// Create a new public image
	AdminCreateImage(context.Context, *AdminCreateImageRequest) (*Image, error)
	// List all public images
	AdminListImages(context.Context, *EmptyRequest) (*AdminListImagesResponse, error)
	// Return a single public image by ID
	AdminGetImage(context.Context, *AdminGetImageRequest) (*Image, error)
	// Updates a public image
	AdminUpdateImage(context.Context, *AdminUpdateImageRequest) (*Image, error)
	// Deletes a public image
	AdminDeleteImage(context.Context, *AdminDeleteImageRequest) (*EmptyResponse, error)
	// DeleteImageVersion Delete a project image version
	AdminDeleteImageVersion(context.Context, *AdminDeleteImageVersionRequest) (*EmptyResponse, error)
	// Lists all operating systems
	AdminListOperatingSystems(context.Context, *EmptyRequest) (*AdminListOperatingSystemsResponse, error)
	// Delete a operating system
	AdminDeleteOperatingSystem(context.Context, *AdminDeleteOperatingSystemRequest) (*EmptyResponse, error)
	// Creates a new operating system
	AdminCreateOperatingSystem(context.Context, *AdminCreateOperatingSystemRequest) (*OperatingSystem, error)
	// Get a single operating system
	AdminGetOperatingSystem(context.Context, *AdminGetOperatingSystemRequest) (*OperatingSystem, error)
	// Update a single operating system
	AdminUpdateOperatingSystem(context.Context, *AdminUpdateOperatingSystemRequest) (*OperatingSystem, error)
	// List all existing flavours
	AdminListFlavours(context.Context, *EmptyRequest) (*AdminListFlavoursResponse, error)
	// Return a single flavour
	AdminGetFlavour(context.Context, *AdminGetFlavourRequest) (*AdminFlavour, error)
	// Delete a flavour
	AdminDeleteFlavour(context.Context, *AdminDeleteFlavourRequest) (*EmptyResponse, error)
	// Create a new flavour
	AdminCreateFlavour(context.Context, *AdminCreateFlavourRequest) (*AdminFlavour, error)
	// Update a existing flavour
	AdminUpdateFlavour(context.Context, *AdminUpdateFlavourRequest) (*AdminFlavour, error)
	// List all switches
	AdminListSwitches(context.Context, *EmptyRequest) (*AdminListSwitchesResponse, error)
	// Get a single switch
	AdminGetSwitch(context.Context, *AdminGetSwitchRequest) (*Switch, error)
	// Delete a switch
	AdminDeleteSwitch(context.Context, *AdminDeleteSwitchRequest) (*EmptyResponse, error)
	// Create a new switch
	AdminCreateSwitch(context.Context, *AdminCreateSwitchRequest) (*Switch, error)
	// Update a existing switch
	AdminUpdateSwitch(context.Context, *AdminUpdateSwitchRequest) (*Switch, error)
	// Returns a list with all agents
	AdminListAgents(context.Context, *EmptyRequest) (*AdminListAgentsResponse, error)
	// Creates a new agent
	AdminCreateAgent(context.Context, *AdminCreateAgentRequest) (*Agent, error)
	// Deletes a agent
	AdminDeleteAgent(context.Context, *AdminDeleteAgentRequest) (*EmptyResponse, error)
	// List all available vouchers
	AdminListVouchers(context.Context, *AdminListVouchersRequest) (*AdminListVouchersResponse, error)
	// Create new voucher(s)
	AdminCreateVouchers(context.Context, *AdminCreateVouchersRequest) (*AdminCreateVouchersResponse, error)
	// Delete a specified voucher
	AdminDeleteVoucher(context.Context, *AdminDeleteVoucherRequest) (*EmptyResponse, error)
	// List all registered users
	AdminListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error)
	// Get user information
	AdminGetUser(context.Context, *AdminGetUserRequest) (*AdminGetUserResponse, error)
	// UpdateUser
	AdminUpdateUser(context.Context, *AdminUpdateUserRequest) (*User, error)
	// Impersonate user
	AdminImpersonateUser(context.Context, *AdminImpersonateUserRequest) (*AdminImpersonateUserResponse, error)
	// Get user bills
	AdminGetUserBills(context.Context, *AdminGetUserBillsRequest) (*AdminGetUserBillsResponse, error)
	// Impersonate user
	AdminLockUser(context.Context, *AdminLockUserRequest) (*EmptyResponse, error)
	// Impersonate user
	AdminUnlockUser(context.Context, *AdminUnlockUserRequest) (*EmptyResponse, error)
	// Get project by ID
	AdminGetProject(context.Context, *AdminGetProjectRequest) (*AdminGetProjectResponse, error)
	// Get project specific networks
	AdminGetProjectNetworks(context.Context, *AdminGetProjectNetworksRequest) (*AdminGetProjectNetworksResponse, error)
	// Create a new project network
	AdminCreateProjectNetwork(context.Context, *AdminCreateProjectNetworkRequest) (*Network, error)
	// Admin update project
	AdminUpdateProject(context.Context, *AdminUpdateProjectRequest) (*AdminGetProjectResponse, error)
	// Get admin logs
	AdminGetAdminLogs(context.Context, *AdminGetAdminLogsRequest) (*AdminGetAdminLogsResponse, error)
	// Create user remark
	AdminCreateUserRemark(context.Context, *AdminCreateUserRemarkRequest) (*EmptyResponse, error)
	// Delete a user remark
	AdminDeleteUserRemark(context.Context, *AdminDeleteUserRemarkRequest) (*EmptyResponse, error)
	// Get SPLA reporting
	AdminGetSplaReporting(context.Context, *AdminGetSplaReportingRequest) (*AdminGetSplaReportingResponse, error)
	// Get IP history
	AdminGetIPHistory(context.Context, *AdminGetIPHistoryRequest) (*AdminGetIPHistoryResponse, error)
	// Get bills
	AdminGetBills(context.Context, *AdminGetBillsRequest) (*AdminGetBillsResponse, error)
	// Sent the bill to the customer again
	AdminResendBill(context.Context, *AdminResendBillRequest) (*EmptyResponse, error)
	// Get bill details
	AdminGetBill(context.Context, *AdminGetBillRequest) (*AdminGetBillResponse, error)
	// Download bill as pdf
	AdminGetBillPdf(context.Context, *AdminGetBillPdfRequest) (*AdminGetBillPdfResponse, error)
	// Add payment to bill request
	AdminAddBillPayment(context.Context, *AdminAddBillPaymentRequest) (*EmptyResponse, error)
	// Refund a specific bill payment
	AdminRefundBillPayment(context.Context, *AdminRefundBillPaymentRequest) (*EmptyResponse, error)
	// Apply credit to a specific project
	AdminApplyCreditToProject(context.Context, *AdminApplyCreditToProjectRequest) (*EmptyResponse, error)
	// List all regions with datacenters
	AdminListRegions(context.Context, *EmptyRequest) (*AdminListRegionsResponse, error)
	// Return a specific region
	AdminGetRegion(context.Context, *AdminGetRegionRequest) (*Region, error)
	// Create a new region
	AdminCreateRegion(context.Context, *AdminCreateRegionRequest) (*Region, error)
	// Update a existing region
	AdminUpdateRegion(context.Context, *AdminUpdateRegionRequest) (*Region, error)
	// Add a datacenter to a region
	AdminAddDatacenterToRegion(context.Context, *AdminAddDatacenterToRegionRequest) (*DataCenter, error)
	// Update a datacenter
	AdminUpdateDatacenter(context.Context, *AdminUpdateDatacenterRequest) (*DataCenter, error)
	// Delete a datacenter
	AdminDeleteDatacenter(context.Context, *AdminDeleteDatacenterRequest) (*EmptyResponse, error)
	// Delete a region
	AdminDeleteRegion(context.Context, *AdminDeleteRegionRequest) (*EmptyResponse, error)
	// Lists all networks
	AdminListNetworks(context.Context, *EmptyRequest) (*AdminListNetworksResponse, error)
	// Create new network
	AdminCreateNetwork(context.Context, *AdminCreateNetworkRequest) (*Network, error)
	// Delete a network
	AdminDeleteNetwork(context.Context, *AdminDeleteNetworkRequest) (*EmptyResponse, error)
	// Get a single network
	AdminGetNetwork(context.Context, *AdminGetNetworkRequest) (*Network, error)
	// Updates a network
	AdminUpdateNetwork(context.Context, *AdminUpdateNetworkRequest) (*Network, error)
	// Delete a subnet
	AdminDeleteSubnet(context.Context, *AdminDeleteSubnetRequest) (*EmptyResponse, error)
	// Create new subnet
	AdminCreateSubnet(context.Context, *AdminCreateSubnetRequest) (*Subnet, error)
	// Updates a subnet
	AdminUpdateSubnet(context.Context, *AdminUpdateSubnetRequest) (*Subnet, error)
	// Get all VLANs for datacenter
	AdminListVlans(context.Context, *AdminListVlansRequest) (*AdminListVlansResponse, error)
	// Create a VLAN for a datacenter
	AdminCreateVlan(context.Context, *AdminCreateVlanRequest) (*VLAN, error)
	// Delete a single VLAN
	AdminDeleteVlan(context.Context, *AdminDeleteVlanRequest) (*EmptyResponse, error)
	// Get monthly reporting
	AdminGetReporting(context.Context, *AdminGetReportingRequest) (*AdminGetReportingResponse, error)
	mustEmbedUnimplementedAdminAPIServer()
}

// UnimplementedAdminAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAPIServer struct {
}

func (UnimplementedAdminAPIServer) AdminListServer(context.Context, *AdminListServerRequest) (*AdminListServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetServer(context.Context, *AdminGetServerRequest) (*AdminServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetServerLogs(context.Context, *AdminGetServerLogsRequest) (*AdminGetServerLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetServerLogs not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetServerAlerts(context.Context, *AdminGetServerAlertsRequest) (*AdminGetServerAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetServerAlerts not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteServerAlert(context.Context, *AdminDeleteServerAlertRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteServerAlert not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateServer(context.Context, *AdminUpdateServerRequest) (*AdminServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteServer(context.Context, *AdminDeleteServerRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminChangeServerPowerStatus(context.Context, *AdminChangeServerPowerStatusRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminChangeServerPowerStatus not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetServerVNCToken(context.Context, *AdminGetServerVNCTokenRequest) (*AdminGetServerVNCTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetServerVNCToken not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetServerPlatformManagement(context.Context, *AdminGetServerPlatformManagementRequest) (*PlatformManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetServerPlatformManagement not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateServerJob(context.Context, *AdminCreateServerJobRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateServerJob not implemented")
}
func (UnimplementedAdminAPIServer) AdminListAvailableServer(context.Context, *EmptyRequest) (*AdminListAvailableServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListAvailableServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminImportServer(context.Context, *AdminImportServerRequest) (*AdminImportServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminImportServer not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateImage(context.Context, *AdminCreateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateImage not implemented")
}
func (UnimplementedAdminAPIServer) AdminListImages(context.Context, *EmptyRequest) (*AdminListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListImages not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetImage(context.Context, *AdminGetImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetImage not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateImage(context.Context, *AdminUpdateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateImage not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteImage(context.Context, *AdminDeleteImageRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteImage not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteImageVersion(context.Context, *AdminDeleteImageVersionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteImageVersion not implemented")
}
func (UnimplementedAdminAPIServer) AdminListOperatingSystems(context.Context, *EmptyRequest) (*AdminListOperatingSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListOperatingSystems not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteOperatingSystem(context.Context, *AdminDeleteOperatingSystemRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteOperatingSystem not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateOperatingSystem(context.Context, *AdminCreateOperatingSystemRequest) (*OperatingSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateOperatingSystem not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetOperatingSystem(context.Context, *AdminGetOperatingSystemRequest) (*OperatingSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetOperatingSystem not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateOperatingSystem(context.Context, *AdminUpdateOperatingSystemRequest) (*OperatingSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateOperatingSystem not implemented")
}
func (UnimplementedAdminAPIServer) AdminListFlavours(context.Context, *EmptyRequest) (*AdminListFlavoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListFlavours not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetFlavour(context.Context, *AdminGetFlavourRequest) (*AdminFlavour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetFlavour not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteFlavour(context.Context, *AdminDeleteFlavourRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteFlavour not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateFlavour(context.Context, *AdminCreateFlavourRequest) (*AdminFlavour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateFlavour not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateFlavour(context.Context, *AdminUpdateFlavourRequest) (*AdminFlavour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateFlavour not implemented")
}
func (UnimplementedAdminAPIServer) AdminListSwitches(context.Context, *EmptyRequest) (*AdminListSwitchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListSwitches not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetSwitch(context.Context, *AdminGetSwitchRequest) (*Switch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSwitch not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteSwitch(context.Context, *AdminDeleteSwitchRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteSwitch not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateSwitch(context.Context, *AdminCreateSwitchRequest) (*Switch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateSwitch not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateSwitch(context.Context, *AdminUpdateSwitchRequest) (*Switch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateSwitch not implemented")
}
func (UnimplementedAdminAPIServer) AdminListAgents(context.Context, *EmptyRequest) (*AdminListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListAgents not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateAgent(context.Context, *AdminCreateAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAgent not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteAgent(context.Context, *AdminDeleteAgentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAgent not implemented")
}
func (UnimplementedAdminAPIServer) AdminListVouchers(context.Context, *AdminListVouchersRequest) (*AdminListVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListVouchers not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateVouchers(context.Context, *AdminCreateVouchersRequest) (*AdminCreateVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateVouchers not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteVoucher(context.Context, *AdminDeleteVoucherRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteVoucher not implemented")
}
func (UnimplementedAdminAPIServer) AdminListUsers(context.Context, *AdminListUsersRequest) (*AdminListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListUsers not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetUser(context.Context, *AdminGetUserRequest) (*AdminGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUser not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateUser(context.Context, *AdminUpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUser not implemented")
}
func (UnimplementedAdminAPIServer) AdminImpersonateUser(context.Context, *AdminImpersonateUserRequest) (*AdminImpersonateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminImpersonateUser not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetUserBills(context.Context, *AdminGetUserBillsRequest) (*AdminGetUserBillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUserBills not implemented")
}
func (UnimplementedAdminAPIServer) AdminLockUser(context.Context, *AdminLockUserRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLockUser not implemented")
}
func (UnimplementedAdminAPIServer) AdminUnlockUser(context.Context, *AdminUnlockUserRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUnlockUser not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetProject(context.Context, *AdminGetProjectRequest) (*AdminGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetProject not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetProjectNetworks(context.Context, *AdminGetProjectNetworksRequest) (*AdminGetProjectNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetProjectNetworks not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateProjectNetwork(context.Context, *AdminCreateProjectNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateProjectNetwork not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateProject(context.Context, *AdminUpdateProjectRequest) (*AdminGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateProject not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetAdminLogs(context.Context, *AdminGetAdminLogsRequest) (*AdminGetAdminLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetAdminLogs not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateUserRemark(context.Context, *AdminCreateUserRemarkRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateUserRemark not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteUserRemark(context.Context, *AdminDeleteUserRemarkRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteUserRemark not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetSplaReporting(context.Context, *AdminGetSplaReportingRequest) (*AdminGetSplaReportingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSplaReporting not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetIPHistory(context.Context, *AdminGetIPHistoryRequest) (*AdminGetIPHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetIPHistory not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetBills(context.Context, *AdminGetBillsRequest) (*AdminGetBillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetBills not implemented")
}
func (UnimplementedAdminAPIServer) AdminResendBill(context.Context, *AdminResendBillRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminResendBill not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetBill(context.Context, *AdminGetBillRequest) (*AdminGetBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetBill not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetBillPdf(context.Context, *AdminGetBillPdfRequest) (*AdminGetBillPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetBillPdf not implemented")
}
func (UnimplementedAdminAPIServer) AdminAddBillPayment(context.Context, *AdminAddBillPaymentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddBillPayment not implemented")
}
func (UnimplementedAdminAPIServer) AdminRefundBillPayment(context.Context, *AdminRefundBillPaymentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRefundBillPayment not implemented")
}
func (UnimplementedAdminAPIServer) AdminApplyCreditToProject(context.Context, *AdminApplyCreditToProjectRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminApplyCreditToProject not implemented")
}
func (UnimplementedAdminAPIServer) AdminListRegions(context.Context, *EmptyRequest) (*AdminListRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListRegions not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetRegion(context.Context, *AdminGetRegionRequest) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetRegion not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateRegion(context.Context, *AdminCreateRegionRequest) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateRegion not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateRegion(context.Context, *AdminUpdateRegionRequest) (*Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateRegion not implemented")
}
func (UnimplementedAdminAPIServer) AdminAddDatacenterToRegion(context.Context, *AdminAddDatacenterToRegionRequest) (*DataCenter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddDatacenterToRegion not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateDatacenter(context.Context, *AdminUpdateDatacenterRequest) (*DataCenter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateDatacenter not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteDatacenter(context.Context, *AdminDeleteDatacenterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteDatacenter not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteRegion(context.Context, *AdminDeleteRegionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteRegion not implemented")
}
func (UnimplementedAdminAPIServer) AdminListNetworks(context.Context, *EmptyRequest) (*AdminListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListNetworks not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateNetwork(context.Context, *AdminCreateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateNetwork not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteNetwork(context.Context, *AdminDeleteNetworkRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteNetwork not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetNetwork(context.Context, *AdminGetNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetNetwork not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateNetwork(context.Context, *AdminUpdateNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateNetwork not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteSubnet(context.Context, *AdminDeleteSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteSubnet not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateSubnet(context.Context, *AdminCreateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateSubnet not implemented")
}
func (UnimplementedAdminAPIServer) AdminUpdateSubnet(context.Context, *AdminUpdateSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateSubnet not implemented")
}
func (UnimplementedAdminAPIServer) AdminListVlans(context.Context, *AdminListVlansRequest) (*AdminListVlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminListVlans not implemented")
}
func (UnimplementedAdminAPIServer) AdminCreateVlan(context.Context, *AdminCreateVlanRequest) (*VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateVlan not implemented")
}
func (UnimplementedAdminAPIServer) AdminDeleteVlan(context.Context, *AdminDeleteVlanRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteVlan not implemented")
}
func (UnimplementedAdminAPIServer) AdminGetReporting(context.Context, *AdminGetReportingRequest) (*AdminGetReportingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetReporting not implemented")
}
func (UnimplementedAdminAPIServer) mustEmbedUnimplementedAdminAPIServer() {}

// UnsafeAdminAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAPIServer will
// result in compilation errors.
type UnsafeAdminAPIServer interface {
	mustEmbedUnimplementedAdminAPIServer()
}

func RegisterAdminAPIServer(s grpc.ServiceRegistrar, srv AdminAPIServer) {
	s.RegisterService(&AdminAPI_ServiceDesc, srv)
}

func _AdminAPI_AdminListServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListServer(ctx, req.(*AdminListServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetServer(ctx, req.(*AdminGetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetServerLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetServerLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetServerLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetServerLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetServerLogs(ctx, req.(*AdminGetServerLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetServerAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetServerAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetServerAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetServerAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetServerAlerts(ctx, req.(*AdminGetServerAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteServerAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteServerAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteServerAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteServerAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteServerAlert(ctx, req.(*AdminDeleteServerAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateServer(ctx, req.(*AdminUpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteServer(ctx, req.(*AdminDeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminChangeServerPowerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminChangeServerPowerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminChangeServerPowerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminChangeServerPowerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminChangeServerPowerStatus(ctx, req.(*AdminChangeServerPowerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetServerVNCToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetServerVNCTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetServerVNCToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetServerVNCToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetServerVNCToken(ctx, req.(*AdminGetServerVNCTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetServerPlatformManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetServerPlatformManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetServerPlatformManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetServerPlatformManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetServerPlatformManagement(ctx, req.(*AdminGetServerPlatformManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateServerJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateServerJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateServerJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateServerJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateServerJob(ctx, req.(*AdminCreateServerJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListAvailableServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListAvailableServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListAvailableServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListAvailableServer(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminImportServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminImportServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminImportServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminImportServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminImportServer(ctx, req.(*AdminImportServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateImage(ctx, req.(*AdminCreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListImages(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetImage(ctx, req.(*AdminGetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateImage(ctx, req.(*AdminUpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteImage(ctx, req.(*AdminDeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteImageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteImageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteImageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteImageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteImageVersion(ctx, req.(*AdminDeleteImageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListOperatingSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListOperatingSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListOperatingSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListOperatingSystems(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteOperatingSystem(ctx, req.(*AdminDeleteOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateOperatingSystem(ctx, req.(*AdminCreateOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetOperatingSystem(ctx, req.(*AdminGetOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateOperatingSystem(ctx, req.(*AdminUpdateOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListFlavours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListFlavours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListFlavours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListFlavours(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetFlavour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetFlavourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetFlavour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetFlavour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetFlavour(ctx, req.(*AdminGetFlavourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteFlavour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteFlavourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteFlavour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteFlavour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteFlavour(ctx, req.(*AdminDeleteFlavourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateFlavour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateFlavourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateFlavour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateFlavour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateFlavour(ctx, req.(*AdminCreateFlavourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateFlavour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateFlavourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateFlavour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateFlavour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateFlavour(ctx, req.(*AdminUpdateFlavourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListSwitches(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetSwitch(ctx, req.(*AdminGetSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteSwitch(ctx, req.(*AdminDeleteSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateSwitch(ctx, req.(*AdminCreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateSwitch(ctx, req.(*AdminUpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListAgents(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateAgent(ctx, req.(*AdminCreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteAgent(ctx, req.(*AdminDeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListVouchers(ctx, req.(*AdminListVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateVouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateVouchers(ctx, req.(*AdminCreateVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteVoucher(ctx, req.(*AdminDeleteVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListUsers(ctx, req.(*AdminListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetUser(ctx, req.(*AdminGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateUser(ctx, req.(*AdminUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminImpersonateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminImpersonateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminImpersonateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminImpersonateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminImpersonateUser(ctx, req.(*AdminImpersonateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetUserBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetUserBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetUserBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetUserBills(ctx, req.(*AdminGetUserBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminLockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminLockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminLockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminLockUser(ctx, req.(*AdminLockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUnlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUnlockUser(ctx, req.(*AdminUnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetProject(ctx, req.(*AdminGetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetProjectNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetProjectNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetProjectNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetProjectNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetProjectNetworks(ctx, req.(*AdminGetProjectNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateProjectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateProjectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateProjectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateProjectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateProjectNetwork(ctx, req.(*AdminCreateProjectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateProject(ctx, req.(*AdminUpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetAdminLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetAdminLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetAdminLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetAdminLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetAdminLogs(ctx, req.(*AdminGetAdminLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateUserRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateUserRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateUserRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateUserRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateUserRemark(ctx, req.(*AdminCreateUserRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteUserRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteUserRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteUserRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteUserRemark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteUserRemark(ctx, req.(*AdminDeleteUserRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetSplaReporting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetSplaReportingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetSplaReporting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetSplaReporting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetSplaReporting(ctx, req.(*AdminGetSplaReportingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetIPHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetIPHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetIPHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetIPHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetIPHistory(ctx, req.(*AdminGetIPHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetBills(ctx, req.(*AdminGetBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminResendBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminResendBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminResendBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminResendBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminResendBill(ctx, req.(*AdminResendBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetBill(ctx, req.(*AdminGetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetBillPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetBillPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetBillPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetBillPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetBillPdf(ctx, req.(*AdminGetBillPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminAddBillPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddBillPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminAddBillPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminAddBillPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminAddBillPayment(ctx, req.(*AdminAddBillPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminRefundBillPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRefundBillPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminRefundBillPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminRefundBillPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminRefundBillPayment(ctx, req.(*AdminRefundBillPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminApplyCreditToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminApplyCreditToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminApplyCreditToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminApplyCreditToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminApplyCreditToProject(ctx, req.(*AdminApplyCreditToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListRegions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetRegion(ctx, req.(*AdminGetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateRegion(ctx, req.(*AdminCreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateRegion(ctx, req.(*AdminUpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminAddDatacenterToRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddDatacenterToRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminAddDatacenterToRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminAddDatacenterToRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminAddDatacenterToRegion(ctx, req.(*AdminAddDatacenterToRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateDatacenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateDatacenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateDatacenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateDatacenter(ctx, req.(*AdminUpdateDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteDatacenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteDatacenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteDatacenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteDatacenter(ctx, req.(*AdminDeleteDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteRegion(ctx, req.(*AdminDeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListNetworks(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateNetwork(ctx, req.(*AdminCreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteNetwork(ctx, req.(*AdminDeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetNetwork(ctx, req.(*AdminGetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateNetwork(ctx, req.(*AdminUpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteSubnet(ctx, req.(*AdminDeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateSubnet(ctx, req.(*AdminCreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminUpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminUpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminUpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminUpdateSubnet(ctx, req.(*AdminUpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminListVlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListVlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminListVlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminListVlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminListVlans(ctx, req.(*AdminListVlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminCreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminCreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminCreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminCreateVlan(ctx, req.(*AdminCreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminDeleteVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminDeleteVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminDeleteVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminDeleteVlan(ctx, req.(*AdminDeleteVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAPI_AdminGetReporting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetReportingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAPIServer).AdminGetReporting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AdminAPI/AdminGetReporting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAPIServer).AdminGetReporting(ctx, req.(*AdminGetReportingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAPI_ServiceDesc is the grpc.ServiceDesc for AdminAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AdminAPI",
	HandlerType: (*AdminAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminListServer",
			Handler:    _AdminAPI_AdminListServer_Handler,
		},
		{
			MethodName: "AdminGetServer",
			Handler:    _AdminAPI_AdminGetServer_Handler,
		},
		{
			MethodName: "AdminGetServerLogs",
			Handler:    _AdminAPI_AdminGetServerLogs_Handler,
		},
		{
			MethodName: "AdminGetServerAlerts",
			Handler:    _AdminAPI_AdminGetServerAlerts_Handler,
		},
		{
			MethodName: "AdminDeleteServerAlert",
			Handler:    _AdminAPI_AdminDeleteServerAlert_Handler,
		},
		{
			MethodName: "AdminUpdateServer",
			Handler:    _AdminAPI_AdminUpdateServer_Handler,
		},
		{
			MethodName: "AdminDeleteServer",
			Handler:    _AdminAPI_AdminDeleteServer_Handler,
		},
		{
			MethodName: "AdminChangeServerPowerStatus",
			Handler:    _AdminAPI_AdminChangeServerPowerStatus_Handler,
		},
		{
			MethodName: "AdminGetServerVNCToken",
			Handler:    _AdminAPI_AdminGetServerVNCToken_Handler,
		},
		{
			MethodName: "AdminGetServerPlatformManagement",
			Handler:    _AdminAPI_AdminGetServerPlatformManagement_Handler,
		},
		{
			MethodName: "AdminCreateServerJob",
			Handler:    _AdminAPI_AdminCreateServerJob_Handler,
		},
		{
			MethodName: "AdminListAvailableServer",
			Handler:    _AdminAPI_AdminListAvailableServer_Handler,
		},
		{
			MethodName: "AdminImportServer",
			Handler:    _AdminAPI_AdminImportServer_Handler,
		},
		{
			MethodName: "AdminCreateImage",
			Handler:    _AdminAPI_AdminCreateImage_Handler,
		},
		{
			MethodName: "AdminListImages",
			Handler:    _AdminAPI_AdminListImages_Handler,
		},
		{
			MethodName: "AdminGetImage",
			Handler:    _AdminAPI_AdminGetImage_Handler,
		},
		{
			MethodName: "AdminUpdateImage",
			Handler:    _AdminAPI_AdminUpdateImage_Handler,
		},
		{
			MethodName: "AdminDeleteImage",
			Handler:    _AdminAPI_AdminDeleteImage_Handler,
		},
		{
			MethodName: "AdminDeleteImageVersion",
			Handler:    _AdminAPI_AdminDeleteImageVersion_Handler,
		},
		{
			MethodName: "AdminListOperatingSystems",
			Handler:    _AdminAPI_AdminListOperatingSystems_Handler,
		},
		{
			MethodName: "AdminDeleteOperatingSystem",
			Handler:    _AdminAPI_AdminDeleteOperatingSystem_Handler,
		},
		{
			MethodName: "AdminCreateOperatingSystem",
			Handler:    _AdminAPI_AdminCreateOperatingSystem_Handler,
		},
		{
			MethodName: "AdminGetOperatingSystem",
			Handler:    _AdminAPI_AdminGetOperatingSystem_Handler,
		},
		{
			MethodName: "AdminUpdateOperatingSystem",
			Handler:    _AdminAPI_AdminUpdateOperatingSystem_Handler,
		},
		{
			MethodName: "AdminListFlavours",
			Handler:    _AdminAPI_AdminListFlavours_Handler,
		},
		{
			MethodName: "AdminGetFlavour",
			Handler:    _AdminAPI_AdminGetFlavour_Handler,
		},
		{
			MethodName: "AdminDeleteFlavour",
			Handler:    _AdminAPI_AdminDeleteFlavour_Handler,
		},
		{
			MethodName: "AdminCreateFlavour",
			Handler:    _AdminAPI_AdminCreateFlavour_Handler,
		},
		{
			MethodName: "AdminUpdateFlavour",
			Handler:    _AdminAPI_AdminUpdateFlavour_Handler,
		},
		{
			MethodName: "AdminListSwitches",
			Handler:    _AdminAPI_AdminListSwitches_Handler,
		},
		{
			MethodName: "AdminGetSwitch",
			Handler:    _AdminAPI_AdminGetSwitch_Handler,
		},
		{
			MethodName: "AdminDeleteSwitch",
			Handler:    _AdminAPI_AdminDeleteSwitch_Handler,
		},
		{
			MethodName: "AdminCreateSwitch",
			Handler:    _AdminAPI_AdminCreateSwitch_Handler,
		},
		{
			MethodName: "AdminUpdateSwitch",
			Handler:    _AdminAPI_AdminUpdateSwitch_Handler,
		},
		{
			MethodName: "AdminListAgents",
			Handler:    _AdminAPI_AdminListAgents_Handler,
		},
		{
			MethodName: "AdminCreateAgent",
			Handler:    _AdminAPI_AdminCreateAgent_Handler,
		},
		{
			MethodName: "AdminDeleteAgent",
			Handler:    _AdminAPI_AdminDeleteAgent_Handler,
		},
		{
			MethodName: "AdminListVouchers",
			Handler:    _AdminAPI_AdminListVouchers_Handler,
		},
		{
			MethodName: "AdminCreateVouchers",
			Handler:    _AdminAPI_AdminCreateVouchers_Handler,
		},
		{
			MethodName: "AdminDeleteVoucher",
			Handler:    _AdminAPI_AdminDeleteVoucher_Handler,
		},
		{
			MethodName: "AdminListUsers",
			Handler:    _AdminAPI_AdminListUsers_Handler,
		},
		{
			MethodName: "AdminGetUser",
			Handler:    _AdminAPI_AdminGetUser_Handler,
		},
		{
			MethodName: "AdminUpdateUser",
			Handler:    _AdminAPI_AdminUpdateUser_Handler,
		},
		{
			MethodName: "AdminImpersonateUser",
			Handler:    _AdminAPI_AdminImpersonateUser_Handler,
		},
		{
			MethodName: "AdminGetUserBills",
			Handler:    _AdminAPI_AdminGetUserBills_Handler,
		},
		{
			MethodName: "AdminLockUser",
			Handler:    _AdminAPI_AdminLockUser_Handler,
		},
		{
			MethodName: "AdminUnlockUser",
			Handler:    _AdminAPI_AdminUnlockUser_Handler,
		},
		{
			MethodName: "AdminGetProject",
			Handler:    _AdminAPI_AdminGetProject_Handler,
		},
		{
			MethodName: "AdminGetProjectNetworks",
			Handler:    _AdminAPI_AdminGetProjectNetworks_Handler,
		},
		{
			MethodName: "AdminCreateProjectNetwork",
			Handler:    _AdminAPI_AdminCreateProjectNetwork_Handler,
		},
		{
			MethodName: "AdminUpdateProject",
			Handler:    _AdminAPI_AdminUpdateProject_Handler,
		},
		{
			MethodName: "AdminGetAdminLogs",
			Handler:    _AdminAPI_AdminGetAdminLogs_Handler,
		},
		{
			MethodName: "AdminCreateUserRemark",
			Handler:    _AdminAPI_AdminCreateUserRemark_Handler,
		},
		{
			MethodName: "AdminDeleteUserRemark",
			Handler:    _AdminAPI_AdminDeleteUserRemark_Handler,
		},
		{
			MethodName: "AdminGetSplaReporting",
			Handler:    _AdminAPI_AdminGetSplaReporting_Handler,
		},
		{
			MethodName: "AdminGetIPHistory",
			Handler:    _AdminAPI_AdminGetIPHistory_Handler,
		},
		{
			MethodName: "AdminGetBills",
			Handler:    _AdminAPI_AdminGetBills_Handler,
		},
		{
			MethodName: "AdminResendBill",
			Handler:    _AdminAPI_AdminResendBill_Handler,
		},
		{
			MethodName: "AdminGetBill",
			Handler:    _AdminAPI_AdminGetBill_Handler,
		},
		{
			MethodName: "AdminGetBillPdf",
			Handler:    _AdminAPI_AdminGetBillPdf_Handler,
		},
		{
			MethodName: "AdminAddBillPayment",
			Handler:    _AdminAPI_AdminAddBillPayment_Handler,
		},
		{
			MethodName: "AdminRefundBillPayment",
			Handler:    _AdminAPI_AdminRefundBillPayment_Handler,
		},
		{
			MethodName: "AdminApplyCreditToProject",
			Handler:    _AdminAPI_AdminApplyCreditToProject_Handler,
		},
		{
			MethodName: "AdminListRegions",
			Handler:    _AdminAPI_AdminListRegions_Handler,
		},
		{
			MethodName: "AdminGetRegion",
			Handler:    _AdminAPI_AdminGetRegion_Handler,
		},
		{
			MethodName: "AdminCreateRegion",
			Handler:    _AdminAPI_AdminCreateRegion_Handler,
		},
		{
			MethodName: "AdminUpdateRegion",
			Handler:    _AdminAPI_AdminUpdateRegion_Handler,
		},
		{
			MethodName: "AdminAddDatacenterToRegion",
			Handler:    _AdminAPI_AdminAddDatacenterToRegion_Handler,
		},
		{
			MethodName: "AdminUpdateDatacenter",
			Handler:    _AdminAPI_AdminUpdateDatacenter_Handler,
		},
		{
			MethodName: "AdminDeleteDatacenter",
			Handler:    _AdminAPI_AdminDeleteDatacenter_Handler,
		},
		{
			MethodName: "AdminDeleteRegion",
			Handler:    _AdminAPI_AdminDeleteRegion_Handler,
		},
		{
			MethodName: "AdminListNetworks",
			Handler:    _AdminAPI_AdminListNetworks_Handler,
		},
		{
			MethodName: "AdminCreateNetwork",
			Handler:    _AdminAPI_AdminCreateNetwork_Handler,
		},
		{
			MethodName: "AdminDeleteNetwork",
			Handler:    _AdminAPI_AdminDeleteNetwork_Handler,
		},
		{
			MethodName: "AdminGetNetwork",
			Handler:    _AdminAPI_AdminGetNetwork_Handler,
		},
		{
			MethodName: "AdminUpdateNetwork",
			Handler:    _AdminAPI_AdminUpdateNetwork_Handler,
		},
		{
			MethodName: "AdminDeleteSubnet",
			Handler:    _AdminAPI_AdminDeleteSubnet_Handler,
		},
		{
			MethodName: "AdminCreateSubnet",
			Handler:    _AdminAPI_AdminCreateSubnet_Handler,
		},
		{
			MethodName: "AdminUpdateSubnet",
			Handler:    _AdminAPI_AdminUpdateSubnet_Handler,
		},
		{
			MethodName: "AdminListVlans",
			Handler:    _AdminAPI_AdminListVlans_Handler,
		},
		{
			MethodName: "AdminCreateVlan",
			Handler:    _AdminAPI_AdminCreateVlan_Handler,
		},
		{
			MethodName: "AdminDeleteVlan",
			Handler:    _AdminAPI_AdminDeleteVlan_Handler,
		},
		{
			MethodName: "AdminGetReporting",
			Handler:    _AdminAPI_AdminGetReporting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ptypes/admin_service.proto",
}
