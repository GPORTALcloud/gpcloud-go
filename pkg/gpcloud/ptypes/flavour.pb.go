// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: flavour.proto

package ptypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlavourAvailability int32

const (
	FlavourAvailability_OUT_OF_STOCK FlavourAvailability = 0
	FlavourAvailability_PREORDER     FlavourAvailability = 1
	FlavourAvailability_LOW          FlavourAvailability = 2
	FlavourAvailability_MID          FlavourAvailability = 3
	FlavourAvailability_HIGH         FlavourAvailability = 4
)

// Enum value maps for FlavourAvailability.
var (
	FlavourAvailability_name = map[int32]string{
		0: "OUT_OF_STOCK",
		1: "PREORDER",
		2: "LOW",
		3: "MID",
		4: "HIGH",
	}
	FlavourAvailability_value = map[string]int32{
		"OUT_OF_STOCK": 0,
		"PREORDER":     1,
		"LOW":          2,
		"MID":          3,
		"HIGH":         4,
	}
)

func (x FlavourAvailability) Enum() *FlavourAvailability {
	p := new(FlavourAvailability)
	*p = x
	return p
}

func (x FlavourAvailability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlavourAvailability) Descriptor() protoreflect.EnumDescriptor {
	return file_flavour_proto_enumTypes[0].Descriptor()
}

func (FlavourAvailability) Type() protoreflect.EnumType {
	return &file_flavour_proto_enumTypes[0]
}

func (x FlavourAvailability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlavourAvailability.Descriptor instead.
func (FlavourAvailability) EnumDescriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{0}
}

type FlavourMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatacenterId  string `protobuf:"bytes,1,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	Available     bool   `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	PreOrderLimit int32  `protobuf:"varint,3,opt,name=pre_order_limit,json=preOrderLimit,proto3" json:"pre_order_limit,omitempty"`
	Price         *Price `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *FlavourMapping) Reset() {
	*x = FlavourMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlavourMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlavourMapping) ProtoMessage() {}

func (x *FlavourMapping) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlavourMapping.ProtoReflect.Descriptor instead.
func (*FlavourMapping) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{0}
}

func (x *FlavourMapping) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *FlavourMapping) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *FlavourMapping) GetPreOrderLimit() int32 {
	if x != nil {
		return x.PreOrderLimit
	}
	return 0
}

func (x *FlavourMapping) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

type AdminListFlavoursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavours []*AdminFlavour `protobuf:"bytes,1,rep,name=flavours,proto3" json:"flavours,omitempty"`
}

func (x *AdminListFlavoursResponse) Reset() {
	*x = AdminListFlavoursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListFlavoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListFlavoursResponse) ProtoMessage() {}

func (x *AdminListFlavoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListFlavoursResponse.ProtoReflect.Descriptor instead.
func (*AdminListFlavoursResponse) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{1}
}

func (x *AdminListFlavoursResponse) GetFlavours() []*AdminFlavour {
	if x != nil {
		return x.Flavours
	}
	return nil
}

type Flavour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flavour ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flavour name
	Name         string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         ComputeResourceType `protobuf:"varint,3,opt,name=type,proto3,enum=api.ComputeResourceType" json:"type,omitempty"`
	Availability FlavourAvailability `protobuf:"varint,4,opt,name=availability,proto3,enum=api.flavour.FlavourAvailability" json:"availability,omitempty"`
	Generation   int32               `protobuf:"varint,5,opt,name=generation,proto3" json:"generation,omitempty"`
	Cpu          string              `protobuf:"bytes,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory       string              `protobuf:"bytes,7,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk         string              `protobuf:"bytes,8,opt,name=disk,proto3" json:"disk,omitempty"`
	Network      string              `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	Traffic      int64               `protobuf:"varint,10,opt,name=traffic,proto3" json:"traffic,omitempty"` // Traffic given in GB/month
	// Price per hour
	Price *Price `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	// Optional windows price per month
	WindowsMonthlyFee *Price `protobuf:"bytes,12,opt,name=windows_monthly_fee,json=windowsMonthlyFee,proto3" json:"windows_monthly_fee,omitempty"`
}

func (x *Flavour) Reset() {
	*x = Flavour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavour) ProtoMessage() {}

func (x *Flavour) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavour.ProtoReflect.Descriptor instead.
func (*Flavour) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{2}
}

func (x *Flavour) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Flavour) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Flavour) GetType() ComputeResourceType {
	if x != nil {
		return x.Type
	}
	return ComputeResourceType_BARE_METAL
}

func (x *Flavour) GetAvailability() FlavourAvailability {
	if x != nil {
		return x.Availability
	}
	return FlavourAvailability_OUT_OF_STOCK
}

func (x *Flavour) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Flavour) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *Flavour) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *Flavour) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *Flavour) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Flavour) GetTraffic() int64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

func (x *Flavour) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Flavour) GetWindowsMonthlyFee() *Price {
	if x != nil {
		return x.WindowsMonthlyFee
	}
	return nil
}

type AdminFlavour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flavour ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Flavour name
	Name       string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       ComputeResourceType `protobuf:"varint,3,opt,name=type,proto3,enum=api.ComputeResourceType" json:"type,omitempty"`
	Generation int32               `protobuf:"varint,4,opt,name=generation,proto3" json:"generation,omitempty"`
	Cpu        string              `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CpuAmount  int32               `protobuf:"varint,6,opt,name=cpu_amount,json=cpuAmount,proto3" json:"cpu_amount,omitempty"`
	CpuCores   int32               `protobuf:"varint,7,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	CpuThreads int32               `protobuf:"varint,8,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`
	Memory     string              `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk       string              `protobuf:"bytes,10,opt,name=disk,proto3" json:"disk,omitempty"`
	Network    string              `protobuf:"bytes,11,opt,name=network,proto3" json:"network,omitempty"`
	Traffic    int64               `protobuf:"varint,12,opt,name=traffic,proto3" json:"traffic,omitempty"` // Traffic given in GB/month
	Mappings   []*FlavourMapping   `protobuf:"bytes,13,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *AdminFlavour) Reset() {
	*x = AdminFlavour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminFlavour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminFlavour) ProtoMessage() {}

func (x *AdminFlavour) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminFlavour.ProtoReflect.Descriptor instead.
func (*AdminFlavour) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{3}
}

func (x *AdminFlavour) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminFlavour) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminFlavour) GetType() ComputeResourceType {
	if x != nil {
		return x.Type
	}
	return ComputeResourceType_BARE_METAL
}

func (x *AdminFlavour) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *AdminFlavour) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *AdminFlavour) GetCpuAmount() int32 {
	if x != nil {
		return x.CpuAmount
	}
	return 0
}

func (x *AdminFlavour) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *AdminFlavour) GetCpuThreads() int32 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *AdminFlavour) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *AdminFlavour) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *AdminFlavour) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AdminFlavour) GetTraffic() int64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

func (x *AdminFlavour) GetMappings() []*FlavourMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type GetProjectFlavoursRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DatacenterId string `protobuf:"bytes,2,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
}

func (x *GetProjectFlavoursRequest) Reset() {
	*x = GetProjectFlavoursRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectFlavoursRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectFlavoursRequest) ProtoMessage() {}

func (x *GetProjectFlavoursRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectFlavoursRequest.ProtoReflect.Descriptor instead.
func (*GetProjectFlavoursRequest) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{4}
}

func (x *GetProjectFlavoursRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectFlavoursRequest) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

type AdminUpdateFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cpu        string            `protobuf:"bytes,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	CpuAmount  int32             `protobuf:"varint,6,opt,name=cpu_amount,json=cpuAmount,proto3" json:"cpu_amount,omitempty"`
	CpuCores   int32             `protobuf:"varint,7,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	CpuThreads int32             `protobuf:"varint,8,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`
	Memory     string            `protobuf:"bytes,9,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk       string            `protobuf:"bytes,10,opt,name=disk,proto3" json:"disk,omitempty"`
	Network    string            `protobuf:"bytes,11,opt,name=network,proto3" json:"network,omitempty"`
	Traffic    int64             `protobuf:"varint,12,opt,name=traffic,proto3" json:"traffic,omitempty"` // Traffic given in GB/month
	Mappings   []*FlavourMapping `protobuf:"bytes,13,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *AdminUpdateFlavourRequest) Reset() {
	*x = AdminUpdateFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateFlavourRequest) ProtoMessage() {}

func (x *AdminUpdateFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateFlavourRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateFlavourRequest) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{5}
}

func (x *AdminUpdateFlavourRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetCpuAmount() int32 {
	if x != nil {
		return x.CpuAmount
	}
	return 0
}

func (x *AdminUpdateFlavourRequest) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *AdminUpdateFlavourRequest) GetCpuThreads() int32 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *AdminUpdateFlavourRequest) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AdminUpdateFlavourRequest) GetTraffic() int64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

func (x *AdminUpdateFlavourRequest) GetMappings() []*FlavourMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type AdminCreateFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ComputeResourceType `protobuf:"varint,2,opt,name=type,proto3,enum=api.ComputeResourceType" json:"type,omitempty"`
}

func (x *AdminCreateFlavourRequest) Reset() {
	*x = AdminCreateFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateFlavourRequest) ProtoMessage() {}

func (x *AdminCreateFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateFlavourRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateFlavourRequest) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{6}
}

func (x *AdminCreateFlavourRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateFlavourRequest) GetType() ComputeResourceType {
	if x != nil {
		return x.Type
	}
	return ComputeResourceType_BARE_METAL
}

type GetProjectFlavoursResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavours []*Flavour `protobuf:"bytes,1,rep,name=flavours,proto3" json:"flavours,omitempty"`
}

func (x *GetProjectFlavoursResponse) Reset() {
	*x = GetProjectFlavoursResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectFlavoursResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectFlavoursResponse) ProtoMessage() {}

func (x *GetProjectFlavoursResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectFlavoursResponse.ProtoReflect.Descriptor instead.
func (*GetProjectFlavoursResponse) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{7}
}

func (x *GetProjectFlavoursResponse) GetFlavours() []*Flavour {
	if x != nil {
		return x.Flavours
	}
	return nil
}

type AdminDeleteFlavourRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AdminDeleteFlavourRequest) Reset() {
	*x = AdminDeleteFlavourRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flavour_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteFlavourRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteFlavourRequest) ProtoMessage() {}

func (x *AdminDeleteFlavourRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flavour_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteFlavourRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteFlavourRequest) Descriptor() ([]byte, []int) {
	return file_flavour_proto_rawDescGZIP(), []int{8}
}

func (x *AdminDeleteFlavourRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_flavour_proto protoreflect.FileDescriptor

var file_flavour_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x1a, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x0e,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x19, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x22,
	0x91, 0x03, 0x0a, 0x07, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a,
	0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x46, 0x65, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70,
	0x75, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x5f,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xc7, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x37, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x2e, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x08,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x2b, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x51, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x45, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x44, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x42, 0x16, 0x5a, 0x14, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flavour_proto_rawDescOnce sync.Once
	file_flavour_proto_rawDescData = file_flavour_proto_rawDesc
)

func file_flavour_proto_rawDescGZIP() []byte {
	file_flavour_proto_rawDescOnce.Do(func() {
		file_flavour_proto_rawDescData = protoimpl.X.CompressGZIP(file_flavour_proto_rawDescData)
	})
	return file_flavour_proto_rawDescData
}

var file_flavour_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flavour_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_flavour_proto_goTypes = []interface{}{
	(FlavourAvailability)(0),           // 0: api.flavour.FlavourAvailability
	(*FlavourMapping)(nil),             // 1: api.flavour.FlavourMapping
	(*AdminListFlavoursResponse)(nil),  // 2: api.flavour.AdminListFlavoursResponse
	(*Flavour)(nil),                    // 3: api.flavour.Flavour
	(*AdminFlavour)(nil),               // 4: api.flavour.AdminFlavour
	(*GetProjectFlavoursRequest)(nil),  // 5: api.flavour.GetProjectFlavoursRequest
	(*AdminUpdateFlavourRequest)(nil),  // 6: api.flavour.AdminUpdateFlavourRequest
	(*AdminCreateFlavourRequest)(nil),  // 7: api.flavour.AdminCreateFlavourRequest
	(*GetProjectFlavoursResponse)(nil), // 8: api.flavour.GetProjectFlavoursResponse
	(*AdminDeleteFlavourRequest)(nil),  // 9: api.flavour.AdminDeleteFlavourRequest
	(*Price)(nil),                      // 10: api.Price
	(ComputeResourceType)(0),           // 11: api.ComputeResourceType
}
var file_flavour_proto_depIdxs = []int32{
	10, // 0: api.flavour.FlavourMapping.price:type_name -> api.Price
	4,  // 1: api.flavour.AdminListFlavoursResponse.flavours:type_name -> api.flavour.AdminFlavour
	11, // 2: api.flavour.Flavour.type:type_name -> api.ComputeResourceType
	0,  // 3: api.flavour.Flavour.availability:type_name -> api.flavour.FlavourAvailability
	10, // 4: api.flavour.Flavour.price:type_name -> api.Price
	10, // 5: api.flavour.Flavour.windows_monthly_fee:type_name -> api.Price
	11, // 6: api.flavour.AdminFlavour.type:type_name -> api.ComputeResourceType
	1,  // 7: api.flavour.AdminFlavour.mappings:type_name -> api.flavour.FlavourMapping
	1,  // 8: api.flavour.AdminUpdateFlavourRequest.mappings:type_name -> api.flavour.FlavourMapping
	11, // 9: api.flavour.AdminCreateFlavourRequest.type:type_name -> api.ComputeResourceType
	3,  // 10: api.flavour.GetProjectFlavoursResponse.flavours:type_name -> api.flavour.Flavour
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_flavour_proto_init() }
func file_flavour_proto_init() {
	if File_flavour_proto != nil {
		return
	}
	file_generic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flavour_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlavourMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListFlavoursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminFlavour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectFlavoursRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectFlavoursResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flavour_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteFlavourRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flavour_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flavour_proto_goTypes,
		DependencyIndexes: file_flavour_proto_depIdxs,
		EnumInfos:         file_flavour_proto_enumTypes,
		MessageInfos:      file_flavour_proto_msgTypes,
	}.Build()
	File_flavour_proto = out.File
	file_flavour_proto_rawDesc = nil
	file_flavour_proto_goTypes = nil
	file_flavour_proto_depIdxs = nil
}
